export let source = tg.function(() =>
	tg.directory({
		["Cargo.toml"]: tg.include("Cargo.toml"),
		["Cargo.lock"]: tg.include("Cargo.lock"),
		["src"]: tg.include("./src"),
		["packages"]: tg.include("./packages"),
		["assets"]: tg.include("./assets"),
	}),
);

export let test = tg.function(async () => {
	await testDirectory();
	await testSymlink();
});

let testDirectory = async () => {
	await testDirectoryGet();
	await testDirectoryNew();
};

let testDirectoryGet = async () => {
	let directory = await tg.directory({
		["foo/bar/baz"]: "hello",
		["foo/qux"]: tg.symlink("bar/baz"),
	});
	tg.Directory.assert(await directory.get(""));
	tg.Directory.assert(await directory.get("foo"));
	tg.Directory.assert(await directory.get("foo/bar"));
	tg.File.assert(await directory.get("foo/qux"));
};

let testDirectoryNew = async () => {
	let foo = tg.directory({
		foo: "foo",
		fooSymlink: tg.symlink("foo"),
	});
	let bar = tg.directory({
		bar: "bar",
		barSymlink: tg.symlink("bar"),
	});
	let foobar = await tg.directory(foo, bar);
	tg.File.assert(await foobar.get("foo"));
	tg.File.assert(await foobar.get("fooSymlink"));
	tg.File.assert(await foobar.get("bar"));
	tg.File.assert(await foobar.get("barSymlink"));
};

let testSymlink = async () => {
	await testSymlinkToFile();
	await testSymlinkInDirectory();
	await testSymlinkWithPathInDirectory();
	await testSymlinkThroughSymlink();
	await testRelativePathSymlink();
	await testDeepRelativePathSymlink();
	await testDependencyIndirection();
	await testMultipleLevelsOfIndirection();
};

let testSymlinkToFile = async () => {
	let hello = await tg.file("hello");
	let symlink = await tg.symlink(hello);
	let resolved = await symlink.resolve();
	tg.File.assert(resolved);
	let text = await resolved.text();
	assert(text === "hello");
};

let testSymlinkInDirectory = async () => {
	let hello = await tg.file("hello");
	let directory = await tg.directory({
		symlink: tg.symlink(hello),
	});
	let resolved = await directory.get("symlink");
	tg.File.assert(resolved);
	let text = await resolved.text();
	assert(text === "hello");
};

let testSymlinkWithPathInDirectory = async () => {
	let directory = await tg.directory({
		hello: "hello",
	});
	let symlink = await tg.symlink(t`${directory}/hello`);
	let resolved = await symlink.resolve();
	tg.File.assert(resolved);
	let text = await resolved.text();
	assert(text === "hello");
};

let testSymlinkThroughSymlink = async () => {
	let foo = await tg.directory({
		"subdirectory/hello": "hello",
	});
	let bar = await tg.directory({
		"subdirectory/world": tg.symlink(t`${foo}`),
	});
	let symlink = await tg.symlink(
		t`${bar}/subdirectory/world/subdirectory/hello`,
	);
	let resolved = await symlink.resolve();
	tg.File.assert(resolved);
	let text = await resolved.text();
	assert(text === "hello");
};

let testRelativePathSymlink = async () => {
	let directory = await tg.directory({
		hello: "hello",
		symlink: tg.symlink("hello"),
	});
	let resolved = await directory.get("symlink");
	tg.File.assert(resolved);
	let text = await resolved.text();
	assert(text === "hello");
};

let testDeepRelativePathSymlink = async () => {
	let directory = await tg.directory({
		hello: "hello",
		foo: {
			bar: {
				baz: {
					symlink: tg.symlink("../../../hello"),
				},
			},
		},
	});
	let resolved = await directory.get("foo/bar/baz/symlink");
	tg.File.assert(resolved);
	let text = await resolved.text();
	assert(text === "hello");
};

let testMultipleLevelsOfIndirection = async () => {
	let foo = await tg.directory({
		link: tg.symlink("subdirectory"),
		"subdirectory/hello": "hello",
	});
	let bar = await tg.directory({
		baz: tg.symlink(foo),
	});
	let resolved = await bar.get("baz/link/hello");
	tg.File.assert(resolved);
	let text = await resolved.text();
	assert(text === "hello");
};

export let testDependencyIndirection = async () => {
	let dependency = tg.directory({
		["bin/hello"]: tg.file("hello"),
	});
	let project = tg.directory({
		["dependencies/dependency"]: tg.symlink(dependency),
	});
	let symlink = await tg.symlink(
		t`${project}/dependencies/dependency/bin/hello`,
	);
	let resolved = await symlink.resolve();
	tg.File.assert(resolved);
	let text = await resolved.text();
	assert(text === "hello");
};

export let assert: (
	condition: unknown,
	message?: string,
) => asserts condition = (condition, message) => {
	if (!condition) {
		throw new Error(message ?? "Failed assertion.");
	}
};
