export default tg.target(async () => {
	let target = await tg.target(
		"echo hello > $OUTPUT",
		{ env: { HELLO: "foo" } },
		{ env: { HELLO: tg.mutation({ kind: "template_append", value: "bar" }) } },
	);
	console.log("target", target);
	return target;
});

export let blob = tg.target(async () => {
	let blob = await tg.blob("hello", "world");
	console.log("blob", blob);
});

export let file = tg.target(async () => {
	let file = await tg.file("hello", "world");
	console.log("file", file);
	let executable = await tg.file(file, { executable: true });
	console.log("executable", executable);
	return executable;
});

export let symlink = tg.target(async () => {
	let dir = await tg.directory({
		file: await tg.file("hello", "world"),
	});

	let symlink = await tg.symlink(tg`${dir}/file`);
	console.log("symlink", symlink);

	let onlyArtifact = await tg.symlink(dir);
	console.log("onlyArtifact", onlyArtifact);

	let otherDir = await tg.directory();
	let twoArtifact = await tg.symlink(dir, otherDir);
	console.log("twoArtifact", twoArtifact);

	let twoTemplates = await tg.symlink(tg`${dir}/file`, tg`${otherDir}/file`);
	console.log("twoTemplates", twoTemplates);

	// Existing symlink followed by arg object.
	let objects = await tg.symlink(twoArtifact, { artifact: dir, path: "file" });
	console.log("objects", objects);

	return symlink;
});

export let template = tg.target(async () => {
	let template = await tg.template("hello", "world");
	console.log("template", template);
	return template;
});

export let mutationRoundTrip = tg.target(async () => {
	let mutations = await bunchOMutations();
	console.log("mutations", mutations);
	return mutations;
});

export let bunchOMutations = tg.target(async () => {
	let obj = {
		unset: await tg.mutation({ kind: "unset" }),
		set: await tg.mutation({ kind: "set", value: 5 }),
		setIfUnset: await tg.mutation({ kind: "set_if_unset", value: "hello" }),
		arrayAppend: await tg.mutation({ kind: "array_append", value: ["hello"] }),
		arrayPrepend: await tg.mutation({
			kind: "array_prepend",
			value: ["hello", "world"],
		}),
		templateAppend: await tg.mutation({
			kind: "template_append",
			value: "hello",
			separator: ":",
		}),
		templatePrepend: await tg.mutation({
			kind: "template_prepend",
			value: "hello",
		}),
	};

	return obj;
});
