{
  "version": 3,
  "sources": ["../src/global/assert.ts", "../src/global/syscall.ts", "../src/global/encoding.ts", "../src/global/env.ts", "../src/global/path.ts", "../src/global/file.ts", "../src/global/placeholder.ts", "../src/global/resource.ts", "../src/global/template.ts", "../src/global/symlink.ts", "../src/global/value.ts", "../src/global/function.ts", "../src/global/operation.ts", "../src/global/command.ts", "../src/global/resolve.ts", "../src/global/blob.ts", "../src/global/directory.ts", "../src/global/artifact.ts", "../src/global/error.ts", "../src/global/include.ts", "../src/global/log.ts", "../src/global/system.ts", "../src/global/main.ts"],
  "sourcesContent": ["export let assert: (\n\tcondition: unknown,\n\tmessage?: string,\n) => asserts condition = (condition, message) => {\n\tif (!condition) {\n\t\tthrow new Error(message ?? \"Failed assertion.\");\n\t}\n};\n\nexport let unimplemented = (message?: string): never => {\n\tthrow new Error(message ?? \"Reached unimplemented code.\");\n};\n\nexport let unreachable = (message?: string): never => {\n\tthrow new Error(message ?? \"Reached unreachable code.\");\n};\n", "export type Artifact =\n\t| { kind: \"directory\"; value: Directory }\n\t| { kind: \"file\"; value: File }\n\t| { kind: \"symlink\"; value: Symlink };\n\nexport namespace Artifact {\n\texport type Hash = string;\n}\n\nexport type Blob = {\n\thash: Blob.Hash;\n};\n\nexport namespace Blob {\n\texport type Hash = string;\n}\n\nexport type Checksum = string;\n\nexport type ChecksumAlgorithm = \"blake3\" | \"sha256\";\n\nexport type Command = {\n\thash: Operation.Hash;\n\tsystem: System;\n\texecutable: Template;\n\tenv: Record<string, Template>;\n\targs: Array<Template>;\n\tchecksum: Checksum | undefined;\n\tunsafe: boolean;\n\tnetwork: boolean;\n\thostPaths: Array<string>;\n};\n\nexport type Directory = {\n\thash: Artifact.Hash;\n\tentries: Record<string, Artifact.Hash>;\n};\n\nexport type File = {\n\thash: Artifact.Hash;\n\tblob: Blob;\n\texecutable: boolean;\n\treferences: Array<Artifact.Hash>;\n};\n\nexport type Function = {\n\thash: Operation.Hash;\n\tpackageHash: Package.Hash;\n\tmodulePath: Subpath;\n\tkind: Function.Kind;\n\tname: string;\n\tenv?: Record<string, Value>;\n\targs?: Array<Value>;\n};\n\nexport namespace Function {\n\texport type Kind = \"function\" | \"test\";\n}\n\nexport type Module =\n\t| { kind: \"library\"; value: LibraryModule }\n\t| { kind: \"document\"; value: DocumentModule }\n\t| { kind: \"normal\"; value: NormalModule };\n\nexport type LibraryModule = {\n\tmodulePath: Subpath;\n};\n\nexport type DocumentModule = {\n\tpackagePath: string;\n\tmodulePath: Subpath;\n};\n\nexport type NormalModule = {\n\tpackageHash: Package.Hash;\n\tmodulePath: Subpath;\n};\n\nexport type Package = {\n\tartifact: Artifact;\n};\n\nexport namespace Package {\n\texport type Hash = string;\n}\n\nexport type Position = {\n\tline: number;\n\tcharacter: number;\n};\n\nexport type Operation =\n\t| { kind: \"command\"; value: Command }\n\t| { kind: \"function\"; value: Function }\n\t| { kind: \"resource\"; value: Resource };\n\nexport namespace Operation {\n\texport type Hash = string;\n}\n\nexport type Relpath = string;\n\nexport type Subpath = string;\n\nexport type Placeholder = {\n\tname: string;\n};\n\nexport type Resource = {\n\thash: Operation.Hash;\n\turl: string;\n\tunpack: boolean;\n\tchecksum?: Checksum;\n\tunsafe: boolean;\n};\n\nexport type UnpackFormat =\n\t| \".bz2\"\n\t| \".gz\"\n\t| \".lz\"\n\t| \".xz\"\n\t| \".zstd\"\n\t| \".tar\"\n\t| \".tar.bz2\"\n\t| \".tar.gz\"\n\t| \".tar.lz\"\n\t| \".tar.xz\"\n\t| \".tar.zstd\"\n\t| \".zip\";\n\nexport type Symlink = {\n\thash: Artifact.Hash;\n\ttarget: Template;\n};\n\nexport type Template = {\n\tcomponents: Array<Template.Component>;\n};\n\nexport namespace Template {\n\texport type Component =\n\t\t| { kind: \"string\"; value: string }\n\t\t| { kind: \"artifact\"; value: Artifact }\n\t\t| { kind: \"placeholder\"; value: Placeholder };\n}\n\nexport type System =\n\t| \"amd64_linux\"\n\t| \"arm64_linux\"\n\t| \"amd64_macos\"\n\t| \"arm64_macos\";\n\nexport type Value =\n\t| { kind: \"null\" }\n\t| { kind: \"bool\"; value: boolean }\n\t| { kind: \"number\"; value: number }\n\t| { kind: \"string\"; value: string }\n\t| { kind: \"bytes\"; value: Uint8Array }\n\t| { kind: \"subpath\"; value: Subpath }\n\t| { kind: \"relpath\"; value: Relpath }\n\t| { kind: \"blob\"; value: Blob }\n\t| { kind: \"artifact\"; value: Artifact }\n\t| { kind: \"placeholder\"; value: Placeholder }\n\t| { kind: \"template\"; value: Template }\n\t| { kind: \"operation\"; value: Operation }\n\t| { kind: \"array\"; value: Array<Value> }\n\t| { kind: \"object\"; value: Record<string, Value> };\n\ndeclare global {\n\tfunction syscall(\n\t\tsyscall: \"artifact_bundle\",\n\t\tartifact: Artifact,\n\t): Promise<Artifact>;\n\n\tfunction syscall(\n\t\tsyscall: \"artifact_get\",\n\t\thash: Artifact.Hash,\n\t): Promise<Artifact>;\n}\n\nexport let artifact = {\n\tbundle: async (artifact: Artifact): Promise<Artifact> => {\n\t\ttry {\n\t\t\treturn await syscall(\"artifact_bundle\", artifact);\n\t\t} catch (cause) {\n\t\t\tthrow new Error(\"The syscall failed.\", { cause });\n\t\t}\n\t},\n\n\tget: async (hash: Artifact.Hash): Promise<Artifact> => {\n\t\ttry {\n\t\t\treturn await syscall(\"artifact_get\", hash);\n\t\t} catch (cause) {\n\t\t\tthrow new Error(\"The syscall failed.\", { cause });\n\t\t}\n\t},\n};\n\ndeclare global {\n\t/** Decode a base64 string to bytes. */\n\tfunction syscall(syscall: \"base64_decode\", value: string): Uint8Array;\n\n\t/** Encode bytes to a base64 string. */\n\tfunction syscall(syscall: \"base64_encode\", value: Uint8Array): string;\n}\n\nexport let base64 = {\n\tdecode: (value: string): Uint8Array => {\n\t\ttry {\n\t\t\treturn syscall(\"base64_decode\", value);\n\t\t} catch (cause) {\n\t\t\tthrow new Error(\"The syscall failed.\", { cause });\n\t\t}\n\t},\n\n\tencode: (value: Uint8Array): string => {\n\t\ttry {\n\t\t\treturn syscall(\"base64_encode\", value);\n\t\t} catch (cause) {\n\t\t\tthrow new Error(\"The syscall failed.\", { cause });\n\t\t}\n\t},\n};\n\ndeclare global {\n\tfunction syscall(syscall: \"blob_bytes\", blob: Blob): Promise<Uint8Array>;\n\n\tfunction syscall(\n\t\tsyscall: \"blob_new\",\n\t\tbytes: Uint8Array | string,\n\t): Promise<Blob>;\n\n\tfunction syscall(syscall: \"blob_text\", blob: Blob): Promise<string>;\n}\n\nexport let blob = {\n\tbytes: async (blob: Blob): Promise<Uint8Array> => {\n\t\ttry {\n\t\t\treturn await syscall(\"blob_bytes\", blob);\n\t\t} catch (cause) {\n\t\t\tthrow new Error(\"The syscall failed.\", { cause });\n\t\t}\n\t},\n\n\tnew: async (bytes: Uint8Array | string): Promise<Blob> => {\n\t\ttry {\n\t\t\treturn await syscall(\"blob_new\", bytes);\n\t\t} catch (cause) {\n\t\t\tthrow new Error(\"The syscall failed.\", { cause });\n\t\t}\n\t},\n\n\ttext: async (blob: Blob): Promise<string> => {\n\t\ttry {\n\t\t\treturn await syscall(\"blob_text\", blob);\n\t\t} catch (cause) {\n\t\t\tthrow new Error(\"The syscall failed.\", { cause });\n\t\t}\n\t},\n};\n\ndeclare global {\n\tfunction syscall(\n\t\tsyscall: \"checksum\",\n\t\talgorithm: ChecksumAlgorithm,\n\t\tbytes: Uint8Array,\n\t): Checksum;\n}\n\nexport let checksum = (\n\talgorithm: ChecksumAlgorithm,\n\tbytes: Uint8Array,\n): Checksum => {\n\ttry {\n\t\treturn syscall(\"checksum\", algorithm, bytes);\n\t} catch (cause) {\n\t\tthrow new Error(\"The syscall failed.\", { cause });\n\t}\n};\n\ndeclare global {\n\ttype CommandArg = {\n\t\tsystem: System;\n\t\texecutable: Template;\n\t\tenv?: Record<string, Template>;\n\t\targs?: Array<Template>;\n\t\tchecksum?: Checksum;\n\t\tunsafe?: boolean;\n\t\tnetwork?: boolean;\n\t\thostPaths?: Array<string>;\n\t};\n\n\tfunction syscall(syscall: \"command_new\", arg: CommandArg): Command;\n}\n\nexport let command = {\n\tnew: (arg: CommandArg): Command => {\n\t\ttry {\n\t\t\treturn syscall(\"command_new\", arg);\n\t\t} catch (cause) {\n\t\t\tthrow new Error(\"The syscall failed.\", { cause });\n\t\t}\n\t},\n};\n\ndeclare global {\n\ttype DirectoryArg = {\n\t\tentries: Record<string, Artifact>;\n\t};\n\n\tfunction syscall(syscall: \"directory_new\", arg: DirectoryArg): Directory;\n}\n\nexport let directory = {\n\tnew: (arg: DirectoryArg): Directory => {\n\t\ttry {\n\t\t\treturn syscall(\"directory_new\", arg);\n\t\t} catch (cause) {\n\t\t\tthrow new Error(\"The syscall failed.\", { cause });\n\t\t}\n\t},\n};\n\ndeclare global {\n\ttype FileArg = {\n\t\tblob: Blob;\n\t\texecutable: boolean;\n\t\treferences: Array<Artifact>;\n\t};\n\n\tfunction syscall(syscall: \"file_new\", arg: FileArg): File;\n}\n\nexport let file = {\n\tnew: (arg: FileArg): File => {\n\t\ttry {\n\t\t\treturn syscall(\"file_new\", arg);\n\t\t} catch (cause) {\n\t\t\tthrow new Error(\"The syscall failed.\", { cause });\n\t\t}\n\t},\n};\n\ndeclare global {\n\ttype FunctionArg = {\n\t\tpackageHash: Package.Hash;\n\t\tmodulePath: Subpath;\n\t\tkind: Function.Kind;\n\t\tname: string;\n\t\tenv: Record<string, Value>;\n\t\targs: Array<Value>;\n\t};\n\n\tfunction syscall(syscall: \"function_new\", arg: FunctionArg): Function;\n}\n\nlet function_ = {\n\tnew: (arg: FunctionArg): Function => {\n\t\ttry {\n\t\t\treturn syscall(\"function_new\", arg);\n\t\t} catch (cause) {\n\t\t\tthrow new Error(\"The syscall failed.\", { cause });\n\t\t}\n\t},\n};\nexport { function_ as function };\n\ndeclare global {\n\t/** Decode a hex string to bytes. */\n\tfunction syscall(syscall: \"hex_decode\", value: string): Uint8Array;\n\n\t/** Encode bytes to a hex string. */\n\tfunction syscall(syscall: \"hex_encode\", value: Uint8Array): string;\n}\n\nexport let hex = {\n\tdecode: (value: string): Uint8Array => {\n\t\ttry {\n\t\t\treturn syscall(\"hex_decode\", value);\n\t\t} catch (cause) {\n\t\t\tthrow new Error(\"The syscall failed.\", { cause });\n\t\t}\n\t},\n\n\tencode: (value: Uint8Array): string => {\n\t\ttry {\n\t\t\treturn syscall(\"hex_encode\", value);\n\t\t} catch (cause) {\n\t\t\tthrow new Error(\"The syscall failed.\", { cause });\n\t\t}\n\t},\n};\n\ndeclare global {\n\t/** Decode a json string to a value. */\n\tfunction syscall(syscall: \"json_decode\", value: string): unknown;\n\n\t/** Encode a value to a json string. */\n\tfunction syscall(syscall: \"json_encode\", value: any): string;\n}\n\nexport let json = {\n\tdecode: (value: string): unknown => {\n\t\ttry {\n\t\t\treturn syscall(\"json_decode\", value);\n\t\t} catch (cause) {\n\t\t\tthrow new Error(\"The syscall failed.\", { cause });\n\t\t}\n\t},\n\n\tencode: (value: any): string => {\n\t\ttry {\n\t\t\treturn syscall(\"json_encode\", value);\n\t\t} catch (cause) {\n\t\t\tthrow new Error(\"The syscall failed.\", { cause });\n\t\t}\n\t},\n};\n\ndeclare global {\n\tfunction syscall(syscall: \"log\", value: string): void;\n}\n\nexport let log = (value: string) => {\n\ttry {\n\t\treturn syscall(\"log\", value);\n\t} catch (cause) {\n\t\tthrow new Error(\"The syscall failed.\", { cause });\n\t}\n};\n\ndeclare global {\n\tfunction syscall(\n\t\tsyscall: \"operation_get\",\n\t\thash: Operation.Hash,\n\t): Promise<Operation>;\n\n\tfunction syscall(\n\t\tsyscall: \"operation_run\",\n\t\toperation: Operation,\n\t): Promise<Value>;\n}\n\nexport let operation = {\n\tget: async (hash: Operation.Hash): Promise<Operation> => {\n\t\ttry {\n\t\t\treturn await syscall(\"operation_get\", hash);\n\t\t} catch (cause) {\n\t\t\tthrow new Error(\"The syscall failed.\", { cause });\n\t\t}\n\t},\n\n\trun: async (operation: Operation): Promise<Value> => {\n\t\ttry {\n\t\t\treturn await syscall(\"operation_run\", operation);\n\t\t} catch (cause) {\n\t\t\tthrow new Error(\"The syscall failed.\", { cause });\n\t\t}\n\t},\n};\n\ndeclare global {\n\ttype ResourceArg = {\n\t\turl: string;\n\t\tunpack: boolean;\n\t\tchecksum?: Checksum;\n\t\tunsafe: boolean;\n\t};\n\n\tfunction syscall(syscall: \"resource_new\", arg: ResourceArg): Resource;\n}\n\nexport let resource = {\n\tnew: (arg: ResourceArg): Resource => {\n\t\ttry {\n\t\t\treturn syscall(\"resource_new\", arg);\n\t\t} catch (cause) {\n\t\t\tthrow new Error(\"The syscall failed.\", { cause });\n\t\t}\n\t},\n};\n\ndeclare global {\n\ttype SymlinkArg = { target: Template };\n\n\tfunction syscall(syscall: \"symlink_new\", arg: SymlinkArg): Symlink;\n}\n\nexport let symlink = {\n\tnew: (arg: SymlinkArg): Symlink => {\n\t\ttry {\n\t\t\treturn syscall(\"symlink_new\", arg);\n\t\t} catch (cause) {\n\t\t\tthrow new Error(\"The syscall failed.\", { cause });\n\t\t}\n\t},\n};\n\ndeclare global {\n\t/** Decode a toml string to a value. */\n\tfunction syscall(syscall: \"toml_decode\", value: string): unknown;\n\n\t/** Encode a value to a toml string. */\n\tfunction syscall(syscall: \"toml_encode\", value: any): string;\n}\n\nexport let toml = {\n\tdecode: (value: string): unknown => {\n\t\ttry {\n\t\t\treturn syscall(\"toml_decode\", value);\n\t\t} catch (cause) {\n\t\t\tthrow new Error(\"The syscall failed.\", { cause });\n\t\t}\n\t},\n\n\tencode: (value: any): string => {\n\t\ttry {\n\t\t\treturn syscall(\"toml_encode\", value);\n\t\t} catch (cause) {\n\t\t\tthrow new Error(\"The syscall failed.\", { cause });\n\t\t}\n\t},\n};\n\ndeclare global {\n\t/** Decode UTF-8 bytes to a string. */\n\tfunction syscall(syscall: \"utf8_decode\", value: Uint8Array): string;\n\n\t/** Encode a string to UTF-8 bytes. */\n\tfunction syscall(syscall: \"utf8_encode\", value: string): Uint8Array;\n}\n\nexport let utf8 = {\n\tdecode: (value: Uint8Array): string => {\n\t\ttry {\n\t\t\treturn syscall(\"utf8_decode\", value);\n\t\t} catch (cause) {\n\t\t\tthrow new Error(\"The syscall failed.\", { cause });\n\t\t}\n\t},\n\n\tencode: (value: string): Uint8Array => {\n\t\ttry {\n\t\t\treturn syscall(\"utf8_encode\", value);\n\t\t} catch (cause) {\n\t\t\tthrow new Error(\"The syscall failed.\", { cause });\n\t\t}\n\t},\n};\n\ndeclare global {\n\t/** Decode a yaml string to a value. */\n\tfunction syscall(syscall: \"yaml_decode\", value: string): unknown;\n\n\t/** Encode a value to a yaml string. */\n\tfunction syscall(syscall: \"yaml_encode\", value: any): string;\n}\n\nexport let yaml = {\n\tdecode: (value: string): unknown => {\n\t\ttry {\n\t\t\treturn syscall(\"yaml_decode\", value);\n\t\t} catch (cause) {\n\t\t\tthrow new Error(\"The syscall failed.\", { cause });\n\t\t}\n\t},\n\n\tencode: (value: any): string => {\n\t\ttry {\n\t\t\treturn syscall(\"yaml_encode\", value);\n\t\t} catch (cause) {\n\t\t\tthrow new Error(\"The syscall failed.\", { cause });\n\t\t}\n\t},\n};\n", "import * as syscall from \"./syscall.ts\";\n\nexport namespace base64 {\n\texport let decode = (value: string): Uint8Array => {\n\t\treturn syscall.base64.decode(value);\n\t};\n\n\texport let encode = (value: Uint8Array): string => {\n\t\treturn syscall.base64.encode(value);\n\t};\n}\n\nexport namespace hex {\n\texport let decode = (value: string): Uint8Array => {\n\t\treturn syscall.hex.decode(value);\n\t};\n\n\texport let encode = (value: Uint8Array): string => {\n\t\treturn syscall.hex.encode(value);\n\t};\n}\n\nexport namespace json {\n\texport let decode = (value: string): unknown => {\n\t\treturn syscall.json.decode(value);\n\t};\n\n\texport let encode = (value: any): string => {\n\t\treturn syscall.json.encode(value);\n\t};\n}\n\nexport namespace toml {\n\texport let decode = (value: string): unknown => {\n\t\treturn syscall.toml.decode(value);\n\t};\n\n\texport let encode = (value: any): string => {\n\t\treturn syscall.toml.encode(value);\n\t};\n}\n\nexport namespace utf8 {\n\texport let decode = (value: Uint8Array): string => {\n\t\treturn syscall.utf8.decode(value);\n\t};\n\n\texport let encode = (value: string): Uint8Array => {\n\t\treturn syscall.utf8.encode(value);\n\t};\n}\n\nexport namespace yaml {\n\texport let decode = (value: string): unknown => {\n\t\treturn syscall.yaml.decode(value);\n\t};\n\n\texport let encode = (value: any): string => {\n\t\treturn syscall.yaml.encode(value);\n\t};\n}\n", "import { assert } from \"./assert\";\nimport { Value } from \"./value\";\n\ntype Env = {\n\tvalue?: Record<string, Value>;\n\tget(): Record<string, Value>;\n};\n\nexport let env: Env = {\n\tget() {\n\t\tassert(this.value);\n\t\treturn this.value;\n\t},\n};\n", "import { assert as assert_ } from \"./assert.ts\";\nimport * as syscall from \"./syscall.ts\";\n\nexport let relpath = (...args: Array<Relpath.Arg>): Relpath => {\n\treturn Relpath.new(...args);\n};\n\nexport let subpath = (...args: Array<Subpath.Arg>): Subpath => {\n\treturn Subpath.new(...args);\n};\n\ntype RelpathConstructorArg = {\n\tparents?: number;\n\tsubpath?: Subpath;\n};\n\nexport class Relpath {\n\t#parents: number;\n\t#subpath: Subpath;\n\n\tstatic new(...args: Array<Relpath.Arg>): Relpath {\n\t\tlet path = new Relpath();\n\t\tlet visit = (arg: Relpath.Arg) => {\n\t\t\tif (typeof arg === \"string\") {\n\t\t\t\tfor (let component of arg.split(\"/\")) {\n\t\t\t\t\tif (component === \"\" || component === \".\") {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else if (component === \"..\") {\n\t\t\t\t\t\tpath = path.parent();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpath.#subpath.push(component);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (arg instanceof Relpath) {\n\t\t\t\tfor (let i = 0; i < arg.#parents; i++) {\n\t\t\t\t\tpath.parent();\n\t\t\t\t}\n\t\t\t\tpath.#subpath.join(arg.#subpath);\n\t\t\t} else if (arg instanceof Subpath) {\n\t\t\t\tpath.#subpath.join(arg);\n\t\t\t} else if (arg instanceof Array) {\n\t\t\t\tfor (let entry of arg) {\n\t\t\t\t\tvisit(entry);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tfor (let arg of args) {\n\t\t\tvisit(arg);\n\t\t}\n\t\treturn path;\n\t}\n\n\tconstructor(arg?: RelpathConstructorArg) {\n\t\tthis.#parents = arg?.parents ?? 0;\n\t\tthis.#subpath = arg?.subpath ?? new Subpath();\n\t}\n\n\tstatic is(value: unknown): value is Relpath {\n\t\treturn value instanceof Relpath;\n\t}\n\n\ttoSyscall(): syscall.Relpath {\n\t\treturn this.toString();\n\t}\n\n\tstatic fromSyscall(value: syscall.Relpath): Relpath {\n\t\treturn Relpath.new(value);\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn this.#parents == 0 && this.#subpath.isEmpty();\n\t}\n\n\tparents(): number {\n\t\treturn this.#parents;\n\t}\n\n\tsubpath(): Subpath {\n\t\treturn this.#subpath;\n\t}\n\n\tparent(): Relpath {\n\t\tif (this.#subpath.isEmpty()) {\n\t\t\tthis.#parents += 1;\n\t\t} else {\n\t\t\tthis.#subpath.pop();\n\t\t}\n\t\treturn this;\n\t}\n\n\tjoin(other: Relpath.Arg): Relpath {\n\t\tother = Relpath.new(other);\n\t\tfor (let i = 0; i < other.#parents; i++) {\n\t\t\tthis.parent();\n\t\t}\n\t\tthis.#subpath.join(other.#subpath);\n\t\treturn this;\n\t}\n\n\textension(): string | undefined {\n\t\treturn this.#subpath.extension();\n\t}\n\n\ttoSubpath(): Subpath {\n\t\tif (this.#parents > 0) {\n\t\t\tthrow new Error(\"Cannot convert to subpath.\");\n\t\t}\n\t\treturn this.#subpath;\n\t}\n\n\ttoString(): string {\n\t\tlet string = \"\";\n\t\tfor (let i = 0; i < this.#parents; i++) {\n\t\t\tstring += \"../\";\n\t\t}\n\t\tstring += this.#subpath.toString();\n\t\treturn string;\n\t}\n}\n\nexport namespace Relpath {\n\texport type Arg = undefined | string | Subpath | Relpath | Array<Arg>;\n\n\texport namespace Arg {\n\t\texport let is = (value: unknown): value is Relpath.Arg => {\n\t\t\treturn (\n\t\t\t\tvalue === undefined ||\n\t\t\t\ttypeof value === \"string\" ||\n\t\t\t\tvalue instanceof Subpath ||\n\t\t\t\tvalue instanceof Relpath ||\n\t\t\t\t(value instanceof Array && value.every(Relpath.Arg.is))\n\t\t\t);\n\t\t};\n\n\t\texport let expect = (value: unknown): Relpath.Arg => {\n\t\t\tassert_(is(value));\n\t\t\treturn value;\n\t\t};\n\n\t\texport let assert = (value: unknown): asserts value is Relpath.Arg => {\n\t\t\tassert_(is(value));\n\t\t};\n\t}\n}\n\nexport class Subpath {\n\t#components: Array<string>;\n\n\tstatic new(...args: Array<Subpath.Arg>): Subpath {\n\t\treturn Relpath.new(...args).toSubpath();\n\t}\n\n\tconstructor(components?: Array<string>) {\n\t\tthis.#components = components ?? [];\n\t}\n\n\tstatic is(value: unknown): value is Subpath {\n\t\treturn value instanceof Subpath;\n\t}\n\n\ttoSyscall(): syscall.Subpath {\n\t\treturn this.toString();\n\t}\n\n\tstatic fromSyscall(value: syscall.Subpath): Subpath {\n\t\treturn subpath(value);\n\t}\n\n\tcomponents(): Array<string> {\n\t\treturn [...this.#components];\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn this.#components.length == 0;\n\t}\n\n\tjoin(other: Subpath): Subpath {\n\t\tthis.#components.push(...other.#components);\n\t\treturn this;\n\t}\n\n\tpush(component: string) {\n\t\tthis.#components.push(component);\n\t}\n\n\tpop() {\n\t\tthis.#components.pop();\n\t}\n\n\textension(): string | undefined {\n\t\treturn this.#components.at(-1)?.split(\".\").at(-1);\n\t}\n\n\ttoRelpath(): Relpath {\n\t\treturn Relpath.new(this);\n\t}\n\n\ttoString(): string {\n\t\treturn this.#components.join(\"/\");\n\t}\n}\n\nexport namespace Subpath {\n\texport type Arg = undefined | string | Subpath | Array<Arg>;\n}\n", "import { Artifact } from \"./artifact.ts\";\nimport { assert as assert_ } from \"./assert.ts\";\nimport { Blob, blob } from \"./blob.ts\";\nimport { Unresolved, resolve } from \"./resolve.ts\";\nimport * as syscall from \"./syscall.ts\";\n\nexport let file = async (arg: Unresolved<File.Arg>) => {\n\treturn await File.new(arg);\n};\n\ntype ConstructorArg = {\n\thash: Artifact.Hash;\n\tblob: Blob;\n\texecutable: boolean;\n\treferences: Array<Artifact.Hash>;\n};\n\nexport class File {\n\t#hash: Artifact.Hash;\n\t#blob: Blob;\n\t#executable: boolean;\n\t#references: Array<Artifact.Hash>;\n\n\tstatic async new(arg: Unresolved<File.Arg>): Promise<File> {\n\t\t// Resolve the arg.\n\t\tlet resolvedArg = await resolve(arg);\n\n\t\t// Get the blob, executable, and references.\n\t\tlet blob_: Blob;\n\t\tlet executable: boolean;\n\t\tlet references: Array<Artifact>;\n\t\tif (Blob.Arg.is(resolvedArg)) {\n\t\t\t// If the arg is a blob arg, then create a file which is not executable and has no references.\n\t\t\tblob_ = await blob(resolvedArg);\n\t\t\texecutable = false;\n\t\t\treferences = [];\n\t\t} else if (File.is(resolvedArg)) {\n\t\t\t// If the arg is a file, then return it.\n\t\t\treturn resolvedArg;\n\t\t} else {\n\t\t\t// Otherwise, the arg is a file object.\n\t\t\tblob_ = await blob(resolvedArg.blob);\n\t\t\texecutable = resolvedArg.executable ?? false;\n\t\t\treferences = resolvedArg.references ?? [];\n\t\t}\n\n\t\t// Create the file.\n\t\treturn File.fromSyscall(\n\t\t\tsyscall.file.new({\n\t\t\t\tblob: blob_.toSyscall(),\n\t\t\t\texecutable,\n\t\t\t\treferences: references.map((reference) =>\n\t\t\t\t\tArtifact.toSyscall(reference),\n\t\t\t\t),\n\t\t\t}),\n\t\t);\n\t}\n\n\tconstructor(arg: ConstructorArg) {\n\t\tthis.#hash = arg.hash;\n\t\tthis.#blob = arg.blob;\n\t\tthis.#executable = arg.executable;\n\t\tthis.#references = arg.references;\n\t}\n\n\tstatic is(value: unknown): value is File {\n\t\treturn value instanceof File;\n\t}\n\n\tstatic expect(value: unknown): File {\n\t\tassert_(File.is(value));\n\t\treturn value;\n\t}\n\n\tstatic assert(value: unknown): asserts value is File {\n\t\tassert_(File.is(value));\n\t}\n\n\ttoSyscall(): syscall.File {\n\t\treturn {\n\t\t\thash: this.#hash,\n\t\t\tblob: this.#blob.toSyscall(),\n\t\t\texecutable: this.#executable,\n\t\t\treferences: this.#references,\n\t\t};\n\t}\n\n\tstatic fromSyscall(value: syscall.File): File {\n\t\treturn new File({\n\t\t\thash: value.hash,\n\t\t\tblob: Blob.fromSyscall(value.blob),\n\t\t\texecutable: value.executable,\n\t\t\treferences: value.references,\n\t\t});\n\t}\n\n\thash(): Artifact.Hash {\n\t\treturn this.#hash;\n\t}\n\n\tblob(): Blob {\n\t\treturn this.#blob;\n\t}\n\n\texecutable(): boolean {\n\t\treturn this.#executable;\n\t}\n\n\tasync references(): Promise<Array<Artifact>> {\n\t\treturn await Promise.all(this.#references.map(Artifact.get));\n\t}\n\n\tasync bytes(): Promise<Uint8Array> {\n\t\treturn await this.blob().bytes();\n\t}\n\n\tasync text(): Promise<string> {\n\t\treturn await this.blob().text();\n\t}\n}\n\nexport namespace File {\n\texport type Arg = Blob.Arg | File | ArgObject;\n\n\texport type ArgObject = {\n\t\tblob: Blob.Arg;\n\t\texecutable?: boolean;\n\t\treferences?: Array<Artifact>;\n\t};\n}\n", "import * as syscall from \"./syscall.ts\";\n\nexport let placeholder = (name: string) => {\n\treturn Placeholder.new(name);\n};\n\nexport class Placeholder {\n\t#name: string;\n\n\tstatic new(name: string): Placeholder {\n\t\treturn new Placeholder(name);\n\t}\n\n\tconstructor(name: string) {\n\t\tthis.#name = name;\n\t}\n\n\tstatic is(value: unknown): value is Placeholder {\n\t\treturn value instanceof Placeholder;\n\t}\n\n\ttoSyscall(): syscall.Placeholder {\n\t\treturn {\n\t\t\tname: this.#name,\n\t\t};\n\t}\n\n\tstatic fromSyscall(placeholder: syscall.Placeholder): Placeholder {\n\t\tlet name = placeholder.name;\n\t\treturn new Placeholder(name);\n\t}\n\n\tname(): string {\n\t\treturn this.#name;\n\t}\n}\n", "import { Artifact } from \"./artifact.ts\";\nimport { assert as assert_ } from \"./assert.ts\";\nimport { Checksum } from \"./checksum.ts\";\nimport { Operation } from \"./operation.ts\";\nimport * as syscall from \"./syscall.ts\";\nimport { Value } from \"./value.ts\";\n\nexport let resource = async (arg: Resource.Arg): Promise<Resource> => {\n\treturn await Resource.new(arg);\n};\n\nexport let download = async (arg: Resource.Arg): Promise<Artifact> => {\n\tlet resource = await Resource.new(arg);\n\tlet output = await resource.download();\n\treturn output;\n};\n\ntype ConstructorArg = {\n\thash: Operation.Hash;\n\turl: string;\n\tunpack?: boolean;\n\tchecksum?: Checksum;\n\tunsafe?: boolean;\n};\n\nexport class Resource {\n\t#hash: Operation.Hash;\n\t#url: string;\n\t#unpack: boolean;\n\t#checksum?: Checksum;\n\t#unsafe: boolean;\n\n\tstatic async new(arg: Resource.Arg): Promise<Resource> {\n\t\treturn Resource.fromSyscall(\n\t\t\tsyscall.resource.new({\n\t\t\t\turl: arg.url,\n\t\t\t\tunpack: arg.unpack ?? false,\n\t\t\t\tchecksum: arg.checksum ?? undefined,\n\t\t\t\tunsafe: arg.unsafe ?? false,\n\t\t\t}),\n\t\t);\n\t}\n\n\tconstructor(arg: ConstructorArg) {\n\t\tthis.#hash = arg.hash;\n\t\tthis.#url = arg.url;\n\t\tthis.#unpack = arg.unpack ?? false;\n\t\tthis.#checksum = arg.checksum ?? undefined;\n\t\tthis.#unsafe = arg.unsafe ?? false;\n\t}\n\n\tstatic is(value: unknown): value is Resource {\n\t\treturn value instanceof Resource;\n\t}\n\n\tstatic expect(value: unknown): Resource {\n\t\tassert_(Resource.is(value));\n\t\treturn value;\n\t}\n\n\tstatic assert(value: unknown): asserts value is Resource {\n\t\tassert_(Resource.is(value));\n\t}\n\n\thash(): Operation.Hash {\n\t\treturn this.#hash;\n\t}\n\n\ttoSyscall(): syscall.Resource {\n\t\treturn {\n\t\t\thash: this.#hash,\n\t\t\turl: this.#url,\n\t\t\tunpack: this.#unpack,\n\t\t\tchecksum: this.#checksum,\n\t\t\tunsafe: this.#unsafe,\n\t\t};\n\t}\n\n\tstatic fromSyscall(download: syscall.Resource): Resource {\n\t\treturn new Resource({\n\t\t\thash: download.hash,\n\t\t\turl: download.url,\n\t\t\tunpack: download.unpack,\n\t\t\tchecksum: download.checksum,\n\t\t\tunsafe: download.unsafe,\n\t\t});\n\t}\n\n\tasync download(): Promise<Artifact> {\n\t\tlet outputFromSyscall = await syscall.operation.run(\n\t\t\tOperation.toSyscall(this),\n\t\t);\n\t\tlet output = Value.fromSyscall(outputFromSyscall);\n\t\treturn output as Artifact;\n\t}\n}\n\nexport namespace Resource {\n\texport type Arg = {\n\t\turl: string;\n\t\tunpack?: boolean;\n\t\tchecksum?: Checksum;\n\t\tunsafe?: boolean;\n\t};\n}\n", "import { Artifact } from \"./artifact.ts\";\nimport { assert as assert_, unreachable } from \"./assert.ts\";\nimport { Relpath, Subpath } from \"./path.ts\";\nimport { Placeholder } from \"./placeholder.ts\";\nimport { Unresolved, resolve } from \"./resolve.ts\";\nimport * as syscall from \"./syscall.ts\";\n\nexport let t = async (\n\tstrings: TemplateStringsArray,\n\t...placeholders: Array<Unresolved<Template.Arg>>\n): Promise<Template> => {\n\t// Collect the strings and placeholders.\n\tlet components: Array<Unresolved<Template.Arg>> = [];\n\tfor (let i = 0; i < strings.length - 1; i++) {\n\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\tlet string = strings[i]!;\n\t\tcomponents.push(string);\n\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\tlet placeholder = placeholders[i]!;\n\t\tcomponents.push(placeholder);\n\t}\n\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\tcomponents.push(strings[strings.length - 1]!);\n\treturn await template(...components);\n};\n\nexport let template = (\n\t...args: Array<Unresolved<Template.Arg>>\n): Promise<Template> => {\n\treturn Template.new(...args);\n};\n\nexport class Template {\n\t#components: Array<Template.Component>;\n\n\tstatic async new(\n\t\t...args: Array<Unresolved<Template.Arg>>\n\t): Promise<Template> {\n\t\t// Collect the components.\n\t\tlet components: Array<Template.Component> = [];\n\t\tlet collectComponents = (arg: Template.Arg) => {\n\t\t\tif (Template.Component.is(arg)) {\n\t\t\t\tcomponents.push(arg);\n\t\t\t} else if (arg instanceof Relpath || arg instanceof Subpath) {\n\t\t\t\tcomponents.push(arg.toString());\n\t\t\t} else if (arg instanceof Template) {\n\t\t\t\tcomponents.push(...arg.components());\n\t\t\t} else if (arg instanceof Array) {\n\t\t\t\tfor (let component of arg) {\n\t\t\t\t\tcollectComponents(component);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tfor (let arg of await Promise.all(args.map(resolve))) {\n\t\t\tcollectComponents(arg);\n\t\t}\n\n\t\t// Normalize the components.\n\t\tlet normalizedComponents: Array<Template.Component> = [];\n\t\tfor (let component of components) {\n\t\t\tlet lastComponent = normalizedComponents.at(-1);\n\t\t\tif (component === \"\") {\n\t\t\t\t// Ignore empty string components.\n\t\t\t\tcontinue;\n\t\t\t} else if (\n\t\t\t\ttypeof lastComponent === \"string\" &&\n\t\t\t\ttypeof component === \"string\"\n\t\t\t) {\n\t\t\t\t// Merge adjacent string components.\n\t\t\t\tnormalizedComponents.splice(-1, 1, lastComponent + component);\n\t\t\t} else {\n\t\t\t\tnormalizedComponents.push(component);\n\t\t\t}\n\t\t}\n\t\tcomponents = normalizedComponents;\n\n\t\t// Remove leading indentation.\n\t\tcomponents = stripLeadingWhitespace(components);\n\n\t\treturn new Template(components);\n\t}\n\n\tconstructor(components: Array<Template.Component>) {\n\t\tthis.#components = components;\n\t}\n\n\tstatic is(value: unknown): value is Template {\n\t\treturn value instanceof Template;\n\t}\n\n\tstatic expect(value: unknown): Template {\n\t\tassert_(Template.is(value));\n\t\treturn value;\n\t}\n\n\tstatic assert(value: unknown): asserts value is Template {\n\t\tassert_(Template.is(value));\n\t}\n\n\t/** Join an array of templates with a separator. */\n\tstatic async join(\n\t\tseparator: Unresolved<Template.Arg>,\n\t\t...args: Array<Unresolved<Template.Arg>>\n\t): Promise<Template> {\n\t\tlet separatorTemplate = await template(separator);\n\t\tlet argTemplates = await Promise.all(args.map((arg) => template(arg)));\n\t\targTemplates = argTemplates.filter((arg) => arg.components().length > 0);\n\t\tlet templates = [];\n\t\tfor (let i = 0; i < argTemplates.length; i++) {\n\t\t\tif (i > 0) {\n\t\t\t\ttemplates.push(separatorTemplate);\n\t\t\t}\n\t\t\tlet argTemplate = argTemplates[i];\n\t\t\tassert_(argTemplate);\n\t\t\ttemplates.push(argTemplate);\n\t\t}\n\t\treturn template(...templates);\n\t}\n\n\ttoSyscall(): syscall.Template {\n\t\tlet components = this.#components.map((component) =>\n\t\t\tTemplate.Component.toSyscall(component),\n\t\t);\n\t\treturn {\n\t\t\tcomponents,\n\t\t};\n\t}\n\n\tstatic fromSyscall(value: syscall.Template): Template {\n\t\tlet components = value.components.map((component) =>\n\t\t\tTemplate.Component.fromSyscall(component),\n\t\t);\n\t\treturn new Template(components);\n\t}\n\n\tcomponents(): Array<Template.Component> {\n\t\treturn [...this.#components];\n\t}\n}\n\nexport namespace Template {\n\texport type Component = string | Artifact | Placeholder;\n\n\texport namespace Component {\n\t\texport let is = (value: unknown): value is Component => {\n\t\t\treturn (\n\t\t\t\ttypeof value === \"string\" ||\n\t\t\t\tArtifact.is(value) ||\n\t\t\t\tvalue instanceof Placeholder\n\t\t\t);\n\t\t};\n\n\t\texport let toSyscall = (\n\t\t\tcomponent: Component,\n\t\t): syscall.Template.Component => {\n\t\t\tif (typeof component === \"string\") {\n\t\t\t\treturn {\n\t\t\t\t\tkind: \"string\",\n\t\t\t\t\tvalue: component,\n\t\t\t\t};\n\t\t\t} else if (Artifact.is(component)) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: \"artifact\",\n\t\t\t\t\tvalue: Artifact.toSyscall(component),\n\t\t\t\t};\n\t\t\t} else if (component instanceof Placeholder) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: \"placeholder\",\n\t\t\t\t\tvalue: component.toSyscall(),\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn unreachable();\n\t\t\t}\n\t\t};\n\n\t\texport let fromSyscall = (\n\t\t\tcomponent: syscall.Template.Component,\n\t\t): Component => {\n\t\t\tswitch (component.kind) {\n\t\t\t\tcase \"string\": {\n\t\t\t\t\treturn component.value;\n\t\t\t\t}\n\t\t\t\tcase \"artifact\": {\n\t\t\t\t\treturn Artifact.fromSyscall(component.value);\n\t\t\t\t}\n\t\t\t\tcase \"placeholder\": {\n\t\t\t\t\treturn Placeholder.fromSyscall(component.value);\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\treturn unreachable();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n}\n\nexport namespace Template {\n\texport type Arg =\n\t\t| undefined\n\t\t| Component\n\t\t| Relpath\n\t\t| Subpath\n\t\t| Template\n\t\t| Array<Arg>;\n\n\texport namespace Arg {\n\t\texport let is = (value: unknown): value is Template.Arg => {\n\t\t\treturn (\n\t\t\t\tTemplate.Component.is(value) ||\n\t\t\t\tvalue instanceof Relpath ||\n\t\t\t\tvalue instanceof Subpath ||\n\t\t\t\tvalue instanceof Template ||\n\t\t\t\t(value instanceof Array && value.every(Template.Arg.is))\n\t\t\t);\n\t\t};\n\t}\n}\n\n// Compute the minimum indentation level of a string. Returns undefined if the string is on one line.\nlet minIndentLevel = (s: string): string | undefined => {\n\tlet lines: Array<string> = s.split(\"\\n\");\n\n\tif (lines.length == 1) {\n\t\treturn undefined;\n\t}\n\n\t// Strip lines with only whitespace.\n\tlines = lines.filter((line) => {\n\t\tlet matches = /^\\s*$/.exec(line);\n\t\treturn !matches;\n\t});\n\n\t// Find lines with zero or more leading whitespaces and find the leading whitespace of minimum length.\n\tlines = lines\n\t\t.map((line) => {\n\t\t\tlet matches = /^\\s*/.exec(line);\n\t\t\treturn matches?.map((s) => s) ?? [];\n\t\t})\n\t\t.flat();\n\n\tif (lines.length == 0) {\n\t\treturn undefined;\n\t} else {\n\t\treturn lines.reduce((acc, str) => {\n\t\t\tlet l1 = acc?.length ?? 0;\n\t\t\tlet l2 = str?.length ?? 0;\n\t\t\treturn l1 < l2 ? acc : str;\n\t\t});\n\t}\n};\n\n// Remove the leading whitespace from string components in a template, including empty lines and any leading indentation.\nlet stripLeadingWhitespace = (\n\tcomponents: Array<Template.Component>,\n): Array<Template.Component> => {\n\tlet minIndent: string | undefined = undefined;\n\n\t// Compute the minimum indentation level.\n\tfor (let component of components) {\n\t\tif (typeof component === \"string\") {\n\t\t\tlet indent = minIndentLevel(component);\n\t\t\tif (indent && !minIndent) {\n\t\t\t\tminIndent = indent;\n\t\t\t} else if (indent && minIndent && indent.length < minIndent.length) {\n\t\t\t\tminIndent = indent;\n\t\t\t}\n\t\t}\n\t}\n\n\t// If there was some indentation, replace all occurrences of it.\n\tif (minIndent) {\n\t\tlet indent = minIndent;\n\t\tcomponents = components.map((component) => {\n\t\t\tif (typeof component === \"string\") {\n\t\t\t\treturn component\n\t\t\t\t\t.split(\"\\n\")\n\t\t\t\t\t.map((line) => {\n\t\t\t\t\t\tif (line.startsWith(indent)) {\n\t\t\t\t\t\t\tline = line.replace(indent, \"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn line;\n\t\t\t\t\t})\n\t\t\t\t\t.join(\"\\n\");\n\t\t\t} else {\n\t\t\t\treturn component;\n\t\t\t}\n\t\t});\n\t}\n\n\treturn components;\n};\n", "import { Artifact } from \"./artifact.ts\";\nimport { assert as assert_ } from \"./assert.ts\";\nimport { Directory } from \"./directory.ts\";\nimport { File } from \"./file.ts\";\nimport { Relpath, Subpath, subpath } from \"./path.ts\";\nimport { Unresolved, resolve } from \"./resolve.ts\";\nimport * as syscall from \"./syscall.ts\";\nimport { Template, t } from \"./template.ts\";\n\nexport let symlink = async (arg: Unresolved<Symlink.Arg>): Promise<Symlink> => {\n\treturn await Symlink.new(arg);\n};\n\ntype ConstructorArg = {\n\thash: Artifact.Hash;\n\ttarget: Template;\n};\n\nexport class Symlink {\n\t#hash: Artifact.Hash;\n\t#target: Template;\n\n\tstatic async new(arg: Unresolved<Symlink.Arg>): Promise<Symlink> {\n\t\t// Resolve the arg.\n\t\tlet resolvedArg = await resolve(arg);\n\n\t\t// Get the artifact and path.\n\t\tlet artifact: Artifact | undefined;\n\t\tlet path_: string | undefined;\n\t\tif (typeof resolvedArg === \"string\") {\n\t\t\tpath_ = resolvedArg;\n\t\t} else if (Relpath.is(resolvedArg) || Subpath.is(resolvedArg)) {\n\t\t\tpath_ = resolvedArg.toString();\n\t\t} else if (Artifact.is(resolvedArg)) {\n\t\t\tartifact = resolvedArg;\n\t\t} else if (resolvedArg instanceof Template) {\n\t\t\tassert_(resolvedArg.components().length <= 2);\n\t\t\tlet [firstComponent, secondComponent] = resolvedArg.components();\n\t\t\tif (typeof firstComponent === \"string\" && secondComponent === undefined) {\n\t\t\t\tpath_ = firstComponent;\n\t\t\t} else if (Artifact.is(firstComponent) && secondComponent === undefined) {\n\t\t\t\tartifact = firstComponent;\n\t\t\t} else if (\n\t\t\t\tArtifact.is(firstComponent) &&\n\t\t\t\ttypeof secondComponent === \"string\"\n\t\t\t) {\n\t\t\t\tartifact = firstComponent;\n\t\t\t\tassert_(secondComponent.startsWith(\"/\"));\n\t\t\t\tpath_ = secondComponent.slice(1);\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Invalid template.\");\n\t\t\t}\n\t\t} else if (resolvedArg instanceof Symlink) {\n\t\t\treturn resolvedArg;\n\t\t} else if (typeof resolvedArg === \"object\") {\n\t\t\tartifact = resolvedArg.artifact;\n\t\t\tlet resolvedArgPath = resolvedArg.path;\n\t\t\tif (typeof resolvedArgPath === \"string\") {\n\t\t\t\tpath_ = resolvedArgPath;\n\t\t\t} else if (Subpath.is(resolvedArgPath)) {\n\t\t\t\tpath_ = resolvedArgPath.toString();\n\t\t\t}\n\t\t}\n\n\t\t// Create the target.\n\t\tlet target;\n\t\tif (artifact !== undefined && path_ !== undefined) {\n\t\t\ttarget = await t`${artifact}/${path_}`;\n\t\t} else if (artifact !== undefined && path_ === undefined) {\n\t\t\ttarget = await t`${artifact}`;\n\t\t} else if (artifact === undefined && path_ !== undefined) {\n\t\t\ttarget = await t`${path_}`;\n\t\t} else {\n\t\t\ttarget = await t``;\n\t\t}\n\n\t\treturn Symlink.fromSyscall(\n\t\t\tsyscall.symlink.new({ target: target.toSyscall() }),\n\t\t);\n\t}\n\n\tconstructor(arg: ConstructorArg) {\n\t\tthis.#hash = arg.hash;\n\t\tthis.#target = arg.target;\n\t}\n\n\tstatic is(value: unknown): value is Symlink {\n\t\treturn value instanceof Symlink;\n\t}\n\n\tstatic expect(value: unknown): Symlink {\n\t\tassert_(Symlink.is(value));\n\t\treturn value;\n\t}\n\n\tstatic assert(value: unknown): asserts value is Symlink {\n\t\tassert_(Symlink.is(value));\n\t}\n\n\ttoSyscall(): syscall.Symlink {\n\t\tlet hash = this.#hash;\n\t\tlet target = this.#target.toSyscall();\n\t\treturn {\n\t\t\thash,\n\t\t\ttarget,\n\t\t};\n\t}\n\n\tstatic fromSyscall(symlink: syscall.Symlink): Symlink {\n\t\tlet hash = symlink.hash;\n\t\tlet target = Template.fromSyscall(symlink.target);\n\t\treturn new Symlink({\n\t\t\thash,\n\t\t\ttarget,\n\t\t});\n\t}\n\n\thash(): Artifact.Hash {\n\t\treturn this.#hash;\n\t}\n\n\ttarget(): Template {\n\t\treturn this.#target;\n\t}\n\n\tartifact(): Artifact | undefined {\n\t\tlet firstComponent = this.#target.components().at(0);\n\t\tif (Artifact.is(firstComponent)) {\n\t\t\treturn firstComponent;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tpath(): Subpath {\n\t\tlet [firstComponent, secondComponent] = this.#target.components();\n\t\tif (typeof firstComponent === \"string\" && secondComponent === undefined) {\n\t\t\treturn subpath(firstComponent);\n\t\t} else if (Artifact.is(firstComponent) && secondComponent === undefined) {\n\t\t\treturn subpath();\n\t\t} else if (\n\t\t\tArtifact.is(firstComponent) &&\n\t\t\ttypeof secondComponent === \"string\"\n\t\t) {\n\t\t\treturn subpath(secondComponent);\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid template.\");\n\t\t}\n\t}\n\n\tasync resolve(): Promise<Directory | File | undefined> {\n\t\tlet result: Artifact = this;\n\t\twhile (Symlink.is(result)) {\n\t\t\tlet artifact = result.artifact();\n\t\t\tlet path = result.path();\n\t\t\tif (Directory.is(artifact)) {\n\t\t\t\tresult = await artifact.get(path);\n\t\t\t} else if (File.is(artifact)) {\n\t\t\t\tassert_(path.components().length === 0);\n\t\t\t\tresult = artifact;\n\t\t\t} else if (Symlink.is(artifact)) {\n\t\t\t\tassert_(path.components().length === 0);\n\t\t\t\tresult = artifact;\n\t\t\t} else {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"Cannot resolve a symlink without an artifact in its target.\",\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\nexport namespace Symlink {\n\texport type Arg =\n\t\t| string\n\t\t| Relpath\n\t\t| Subpath\n\t\t| Artifact\n\t\t| Template\n\t\t| ArgObject;\n\n\texport type ArgObject = {\n\t\tartifact?: Artifact;\n\t\tpath?: string | Subpath;\n\t};\n}\n", "import { Artifact } from \"./artifact.ts\";\nimport { assert as assert_, unreachable } from \"./assert.ts\";\nimport { Blob } from \"./blob.ts\";\nimport { Command } from \"./command.ts\";\nimport { Directory } from \"./directory.ts\";\nimport { File } from \"./file.ts\";\nimport { Operation } from \"./operation.ts\";\nimport { Relpath, Subpath } from \"./path.ts\";\nimport { Placeholder } from \"./placeholder.ts\";\nimport { Resource } from \"./resource.ts\";\nimport { Symlink } from \"./symlink.ts\";\nimport * as syscall from \"./syscall.ts\";\nimport { Template } from \"./template.ts\";\n\nexport type Value =\n\t| undefined\n\t| boolean\n\t| number\n\t| string\n\t| Uint8Array\n\t| Relpath\n\t| Subpath\n\t| Blob\n\t| Artifact\n\t| Placeholder\n\t| Template\n\t| Operation\n\t| Array<Value>\n\t| { [key: string]: Value };\n\nexport namespace Value {\n\texport let is = (value: unknown): value is Value => {\n\t\treturn (\n\t\t\tvalue === undefined ||\n\t\t\ttypeof value === \"boolean\" ||\n\t\t\ttypeof value === \"number\" ||\n\t\t\ttypeof value === \"string\" ||\n\t\t\tvalue instanceof Uint8Array ||\n\t\t\tvalue instanceof Relpath ||\n\t\t\tvalue instanceof Subpath ||\n\t\t\tvalue instanceof Blob ||\n\t\t\tvalue instanceof Directory ||\n\t\t\tvalue instanceof File ||\n\t\t\tvalue instanceof Symlink ||\n\t\t\tvalue instanceof Placeholder ||\n\t\t\tvalue instanceof Template ||\n\t\t\tvalue instanceof Command ||\n\t\t\tvalue instanceof Function ||\n\t\t\tvalue instanceof Resource ||\n\t\t\tvalue instanceof Array ||\n\t\t\ttypeof value === \"object\"\n\t\t);\n\t};\n\n\texport let expect = (value: unknown): Value => {\n\t\tassert_(is(value));\n\t\treturn value;\n\t};\n\n\texport let assert = (value: unknown): asserts value is Value => {\n\t\tassert_(is(value));\n\t};\n\n\texport let toSyscall = <T extends Value>(value: T): syscall.Value => {\n\t\tif (value === undefined) {\n\t\t\treturn {\n\t\t\t\tkind: \"null\",\n\t\t\t};\n\t\t} else if (typeof value === \"boolean\") {\n\t\t\treturn {\n\t\t\t\tkind: \"bool\",\n\t\t\t\tvalue,\n\t\t\t};\n\t\t} else if (typeof value === \"number\") {\n\t\t\treturn {\n\t\t\t\tkind: \"number\",\n\t\t\t\tvalue,\n\t\t\t};\n\t\t} else if (typeof value === \"string\") {\n\t\t\treturn {\n\t\t\t\tkind: \"string\",\n\t\t\t\tvalue,\n\t\t\t};\n\t\t} else if (value instanceof Uint8Array) {\n\t\t\treturn {\n\t\t\t\tkind: \"bytes\",\n\t\t\t\tvalue,\n\t\t\t};\n\t\t} else if (value instanceof Relpath) {\n\t\t\treturn {\n\t\t\t\tkind: \"relpath\",\n\t\t\t\tvalue: value.toSyscall(),\n\t\t\t};\n\t\t} else if (value instanceof Subpath) {\n\t\t\treturn {\n\t\t\t\tkind: \"subpath\",\n\t\t\t\tvalue: value.toSyscall(),\n\t\t\t};\n\t\t} else if (value instanceof Blob) {\n\t\t\treturn {\n\t\t\t\tkind: \"blob\",\n\t\t\t\tvalue: value.toSyscall(),\n\t\t\t};\n\t\t} else if (Artifact.is(value)) {\n\t\t\treturn {\n\t\t\t\tkind: \"artifact\",\n\t\t\t\tvalue: Artifact.toSyscall(value),\n\t\t\t};\n\t\t} else if (value instanceof Placeholder) {\n\t\t\treturn {\n\t\t\t\tkind: \"placeholder\",\n\t\t\t\tvalue: value.toSyscall(),\n\t\t\t};\n\t\t} else if (value instanceof Template) {\n\t\t\treturn {\n\t\t\t\tkind: \"template\",\n\t\t\t\tvalue: value.toSyscall(),\n\t\t\t};\n\t\t} else if (Operation.is(value)) {\n\t\t\treturn {\n\t\t\t\tkind: \"operation\",\n\t\t\t\tvalue: Operation.toSyscall(value),\n\t\t\t};\n\t\t} else if (value instanceof Array) {\n\t\t\tlet syscallValue = value.map((value) => Value.toSyscall(value));\n\t\t\treturn {\n\t\t\t\tkind: \"array\",\n\t\t\t\tvalue: syscallValue,\n\t\t\t};\n\t\t} else if (typeof value === \"object\") {\n\t\t\tlet syscallValue = Object.fromEntries(\n\t\t\t\tObject.entries(value).map(([key, value]) => [\n\t\t\t\t\tkey,\n\t\t\t\t\tValue.toSyscall(value),\n\t\t\t\t]),\n\t\t\t);\n\t\t\treturn {\n\t\t\t\tkind: \"object\",\n\t\t\t\tvalue: syscallValue,\n\t\t\t};\n\t\t} else {\n\t\t\treturn unreachable();\n\t\t}\n\t};\n\n\texport let fromSyscall = (value: syscall.Value): Value => {\n\t\tswitch (value.kind) {\n\t\t\tcase \"null\": {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tcase \"bool\": {\n\t\t\t\treturn value.value;\n\t\t\t}\n\t\t\tcase \"number\": {\n\t\t\t\treturn value.value;\n\t\t\t}\n\t\t\tcase \"string\": {\n\t\t\t\treturn value.value;\n\t\t\t}\n\t\t\tcase \"bytes\": {\n\t\t\t\treturn value.value;\n\t\t\t}\n\t\t\tcase \"relpath\": {\n\t\t\t\treturn Relpath.fromSyscall(value.value);\n\t\t\t}\n\t\t\tcase \"subpath\": {\n\t\t\t\treturn Subpath.fromSyscall(value.value);\n\t\t\t}\n\t\t\tcase \"blob\": {\n\t\t\t\treturn Blob.fromSyscall(value.value);\n\t\t\t}\n\t\t\tcase \"artifact\": {\n\t\t\t\treturn Artifact.fromSyscall(value.value);\n\t\t\t}\n\t\t\tcase \"placeholder\": {\n\t\t\t\treturn Placeholder.fromSyscall(value.value);\n\t\t\t}\n\t\t\tcase \"template\": {\n\t\t\t\treturn Template.fromSyscall(value.value);\n\t\t\t}\n\t\t\tcase \"operation\": {\n\t\t\t\treturn Operation.fromSyscall(value.value);\n\t\t\t}\n\t\t\tcase \"array\": {\n\t\t\t\treturn value.value.map((value) => Value.fromSyscall(value));\n\t\t\t}\n\t\t\tcase \"object\": {\n\t\t\t\treturn Object.fromEntries(\n\t\t\t\t\tObject.entries(value.value).map(([key, value]) => [\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tValue.fromSyscall(value),\n\t\t\t\t\t]),\n\t\t\t\t);\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\treturn unreachable();\n\t\t\t}\n\t\t}\n\t};\n}\n", "import { assert as assert_ } from \"./assert.ts\";\nimport { json } from \"./encoding.ts\";\nimport { env as globalEnv } from \"./env.ts\";\nimport { Operation } from \"./operation.ts\";\nimport { Package } from \"./package.ts\";\nimport { Subpath, subpath } from \"./path.ts\";\nimport { MaybePromise, Unresolved, resolve } from \"./resolve.ts\";\nimport * as syscall from \"./syscall.ts\";\nimport { Value } from \"./value.ts\";\n\nexport let functions: Record<string, Function<any, any>> = {};\n\ntype FunctionArg<\n\tA extends Array<Value> = Array<Value>,\n\tR extends Value = Value,\n> = {\n\tf: (...args: A) => MaybePromise<R>;\n\tmodule: syscall.Module;\n\tkind?: Function.Kind;\n\tname: string;\n};\n\nexport let function_ = <\n\tA extends Array<Value> = Array<Value>,\n\tR extends Value = Value,\n>(\n\targ: FunctionArg<A, R>,\n) => {\n\t// Create the function.\n\tassert_(arg.module.kind === \"normal\");\n\tlet function_ = Function.fromSyscall<A, R>(\n\t\tsyscall.function.new({\n\t\t\tpackageHash: arg.module.value.packageHash,\n\t\t\tmodulePath: arg.module.value.modulePath,\n\t\t\tkind: arg.kind ?? \"function\",\n\t\t\tname: arg.name,\n\t\t\tenv: {},\n\t\t\targs: [],\n\t\t}),\n\t);\n\tfunction_.f = arg.f;\n\n\t// Register the function.\n\tlet key = json.encode({ module: arg.module, name: arg.name });\n\tassert_(functions[key] === undefined);\n\tfunctions[key] = function_;\n\n\treturn function_;\n};\n\nexport let test = <\n\tA extends Array<Value> = Array<Value>,\n\tR extends Value = Value,\n>(\n\targ: FunctionArg<A, R>,\n) => {\n\treturn function_({ ...arg, kind: \"test\" });\n};\n\nexport let entrypoint = async <A extends Array<Value>, R extends Value>(\n\tf: (...args: A) => MaybePromise<R>,\n\tsyscallEnv: Record<string, syscall.Value>,\n\tsyscallArgs: Array<syscall.Value>,\n): Promise<syscall.Value> => {\n\t// Set the env.\n\tglobalEnv.value = Object.fromEntries(\n\t\tObject.entries(syscallEnv).map(([key, value]) => [\n\t\t\tkey,\n\t\t\tValue.fromSyscall(value),\n\t\t]),\n\t);\n\n\t// Get the args.\n\tlet args = syscallArgs.map((value) => Value.fromSyscall(value)) as A;\n\n\t// Call the function.\n\tlet output = await f(...args);\n\n\t// Get the output.\n\tlet syscallOutput = Value.toSyscall(output);\n\n\treturn syscallOutput;\n};\n\ntype NewArg<A extends Array<Value> = Array<Value>, R extends Value = Value> = {\n\tfunction: Function<A, R>;\n\tenv?: Record<string, Value>;\n\targs?: A;\n};\n\ntype ConstructorArg<\n\tA extends Array<Value> = Array<Value>,\n\tR extends Value = Value,\n> = {\n\tf?: (...args: A) => MaybePromise<R>;\n\thash: Operation.Hash;\n\tpackageHash: Package.Hash;\n\tmodulePath: Subpath.Arg;\n\tkind: Function.Kind;\n\tname: string;\n\tenv?: Record<string, Value>;\n\targs?: A;\n};\n\nexport interface Function<\n\tA extends Array<Value> = Array<Value>,\n\tR extends Value = Value,\n> {\n\t(...args: { [K in keyof A]: Unresolved<A[K]> }): Promise<R>;\n}\n\nexport class Function<\n\tA extends Array<Value> = Array<Value>,\n\tR extends Value = Value,\n> extends globalThis.Function {\n\tf?: (...args: A) => MaybePromise<R>;\n\thash: Operation.Hash;\n\tpackageHash: Package.Hash;\n\tmodulePath: Subpath;\n\tkind: Function.Kind;\n\tname: string;\n\tenv?: Record<string, Value>;\n\targs?: A;\n\n\tstatic new<A extends Array<Value> = Array<Value>, R extends Value = Value>(\n\t\targ: NewArg<A, R>,\n\t): Function<A, R> {\n\t\tlet env_ = Object.fromEntries(\n\t\t\tObject.entries(arg.env ?? {}).map(([key, value]) => [\n\t\t\t\tkey,\n\t\t\t\tValue.toSyscall(value),\n\t\t\t]),\n\t\t);\n\t\tlet args_ = (arg.args ?? []).map((value) => Value.toSyscall(value));\n\t\tlet function_ = Function.fromSyscall<A, R>(\n\t\t\tsyscall.function.new({\n\t\t\t\tpackageHash: arg.function.packageHash,\n\t\t\t\tmodulePath: arg.function.modulePath.toSyscall(),\n\t\t\t\tkind: arg.function.kind,\n\t\t\t\tname: arg.function.name,\n\t\t\t\tenv: env_,\n\t\t\t\targs: args_,\n\t\t\t}),\n\t\t);\n\t\tfunction_.f = arg.function.f;\n\t\treturn function_;\n\t}\n\n\tconstructor(arg: ConstructorArg<A, R>) {\n\t\tsuper();\n\n\t\tthis.f = arg.f;\n\t\tthis.hash = arg.hash;\n\t\tthis.packageHash = arg.packageHash;\n\t\tthis.modulePath = subpath(arg.modulePath);\n\t\tthis.kind = arg.kind;\n\t\tthis.name = arg.name;\n\t\tthis.env = arg.env;\n\t\tthis.args = arg.args;\n\n\t\t// Proxy this object so that it is callable.\n\t\treturn new Proxy(this, {\n\t\t\tapply: async (target, _, args) => {\n\t\t\t\tlet function_ = Function.new({\n\t\t\t\t\tfunction: target,\n\t\t\t\t\targs: (await Promise.all(args.map(resolve))) as A,\n\t\t\t\t\tenv: globalEnv.value,\n\t\t\t\t});\n\t\t\t\tlet syscallOutput = await syscall.operation.run(\n\t\t\t\t\tOperation.toSyscall(function_ as Operation),\n\t\t\t\t);\n\t\t\t\tlet output = Value.fromSyscall(syscallOutput) as R;\n\t\t\t\treturn output;\n\t\t\t},\n\t\t});\n\t}\n\n\tstatic is(value: unknown): value is Function {\n\t\treturn value instanceof Function;\n\t}\n\n\tstatic expect(value: unknown): Function {\n\t\tassert_(Function.is(value));\n\t\treturn value;\n\t}\n\n\tstatic assert(value: unknown): asserts value is Function {\n\t\tassert_(Function.is(value));\n\t}\n\n\ttoSyscall(): syscall.Function {\n\t\tlet hash = this.hash;\n\t\tlet packageHash = this.packageHash;\n\t\tlet modulePath = this.modulePath.toString();\n\t\tlet kind = this.kind;\n\t\tlet name = this.name;\n\t\tlet env = this.env\n\t\t\t? Object.fromEntries(\n\t\t\t\t\tObject.entries(this.env).map(([key, value]) => [\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tValue.toSyscall(value),\n\t\t\t\t\t]),\n\t\t\t  )\n\t\t\t: undefined;\n\t\tlet args = this.args\n\t\t\t? this.args.map((arg) => Value.toSyscall(arg))\n\t\t\t: undefined;\n\t\treturn {\n\t\t\thash,\n\t\t\tpackageHash,\n\t\t\tmodulePath,\n\t\t\tkind,\n\t\t\tname,\n\t\t\tenv,\n\t\t\targs,\n\t\t};\n\t}\n\n\tstatic fromSyscall<\n\t\tA extends Array<Value> = Array<Value>,\n\t\tR extends Value = Value,\n\t>(function_: syscall.Function): Function<A, R> {\n\t\tlet hash = function_.hash;\n\t\tlet packageHash = function_.packageHash;\n\t\tlet modulePath = function_.modulePath;\n\t\tlet kind = function_.kind;\n\t\tlet name = function_.name;\n\t\tlet env =\n\t\t\tfunction_.env !== undefined\n\t\t\t\t? Object.fromEntries(\n\t\t\t\t\t\tObject.entries(function_.env).map(([key, value]) => [\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tValue.fromSyscall(value),\n\t\t\t\t\t\t]),\n\t\t\t\t  )\n\t\t\t\t: undefined;\n\t\tlet args =\n\t\t\tfunction_.args !== undefined\n\t\t\t\t? (function_.args.map((arg) => Value.fromSyscall(arg)) as A)\n\t\t\t\t: undefined;\n\t\treturn new Function({\n\t\t\thash,\n\t\t\tpackageHash,\n\t\t\tmodulePath,\n\t\t\tkind,\n\t\t\tname,\n\t\t\tenv,\n\t\t\targs,\n\t\t});\n\t}\n}\n\nexport namespace Function {\n\texport type Kind = \"function\" | \"test\";\n}\n", "import { unreachable } from \"./assert.ts\";\nimport { Command } from \"./command.ts\";\nimport { Function } from \"./function.ts\";\nimport { Resource } from \"./resource.ts\";\nimport * as syscall from \"./syscall.ts\";\n\nexport type Operation = Command | Function | Resource;\n\nexport namespace Operation {\n\texport type Hash = string;\n\n\texport let is = (value: unknown): value is Operation => {\n\t\treturn (\n\t\t\tvalue instanceof Command ||\n\t\t\tvalue instanceof Function ||\n\t\t\tvalue instanceof Resource\n\t\t);\n\t};\n\n\texport let toSyscall = (operation: Operation): syscall.Operation => {\n\t\tif (operation instanceof Command) {\n\t\t\treturn {\n\t\t\t\tkind: \"command\",\n\t\t\t\tvalue: operation.toSyscall(),\n\t\t\t};\n\t\t} else if (operation instanceof Function) {\n\t\t\treturn {\n\t\t\t\tkind: \"function\",\n\t\t\t\tvalue: operation.toSyscall(),\n\t\t\t};\n\t\t} else if (operation instanceof Resource) {\n\t\t\treturn {\n\t\t\t\tkind: \"resource\",\n\t\t\t\tvalue: operation.toSyscall(),\n\t\t\t};\n\t\t} else {\n\t\t\treturn unreachable();\n\t\t}\n\t};\n\n\texport let fromSyscall = (operation: syscall.Operation): Operation => {\n\t\tswitch (operation.kind) {\n\t\t\tcase \"command\": {\n\t\t\t\treturn Command.fromSyscall(operation.value);\n\t\t\t}\n\t\t\tcase \"function\": {\n\t\t\t\treturn Function.fromSyscall(operation.value);\n\t\t\t}\n\t\t\tcase \"resource\": {\n\t\t\t\treturn Resource.fromSyscall(operation.value);\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\treturn unreachable();\n\t\t\t}\n\t\t}\n\t};\n}\n", "import { Artifact } from \"./artifact.ts\";\nimport { Checksum } from \"./checksum.ts\";\nimport { Operation } from \"./operation.ts\";\nimport { placeholder } from \"./placeholder.ts\";\nimport { Unresolved, resolve } from \"./resolve.ts\";\nimport * as syscall from \"./syscall.ts\";\nimport { System } from \"./system.ts\";\nimport { Template, template } from \"./template.ts\";\nimport { Value } from \"./value.ts\";\n\nexport let command = async (arg: Unresolved<Command.Arg>): Promise<Command> => {\n\treturn await Command.new(arg);\n};\n\nexport let run = async (\n\targ: Unresolved<Command.Arg>,\n): Promise<Artifact | undefined> => {\n\tlet command = await Command.new(arg);\n\tlet output = await command.run();\n\treturn output;\n};\n\nexport let output = placeholder(\"output\");\n\ntype ConstructorArg = {\n\thash: Operation.Hash;\n\tsystem: System;\n\texecutable: Template;\n\tenv: Record<string, Template>;\n\targs: Array<Template>;\n\tchecksum?: Checksum;\n\tunsafe: boolean;\n\tnetwork: boolean;\n\thostPaths: Array<string>;\n};\n\nexport class Command {\n\t#hash: Operation.Hash;\n\t#system: System;\n\t#executable: Template;\n\t#env: Record<string, Template>;\n\t#args: Array<Template>;\n\t#checksum?: Checksum;\n\t#unsafe: boolean;\n\t#network: boolean;\n\t#hostPaths: Array<string>;\n\n\tstatic async new(arg: Unresolved<Command.Arg>): Promise<Command> {\n\t\tlet resolvedArg = await resolve(arg);\n\t\tlet system = resolvedArg.system;\n\t\tlet executable = await template(resolvedArg.executable);\n\t\tlet env: Record<string, Template> = Object.fromEntries(\n\t\t\tawait Promise.all(\n\t\t\t\tObject.entries(resolvedArg.env ?? {}).map(async ([key, value]) => [\n\t\t\t\t\tkey,\n\t\t\t\t\tawait template(value),\n\t\t\t\t]),\n\t\t\t),\n\t\t);\n\t\tlet env_ = Object.fromEntries(\n\t\t\tObject.entries(env).map(([key, value]) => [key, value.toSyscall()]),\n\t\t);\n\t\tlet args_ = await Promise.all(\n\t\t\t(resolvedArg.args ?? []).map(async (arg) =>\n\t\t\t\t(await template(arg)).toSyscall(),\n\t\t\t),\n\t\t);\n\t\tlet checksum = resolvedArg.checksum ?? undefined;\n\t\tlet unsafe = resolvedArg.unsafe ?? false;\n\t\tlet network = resolvedArg.network ?? false;\n\t\tlet hostPaths = resolvedArg.hostPaths ?? [];\n\t\treturn Command.fromSyscall(\n\t\t\tsyscall.command.new({\n\t\t\t\tsystem,\n\t\t\t\texecutable: executable.toSyscall(),\n\t\t\t\tenv: env_,\n\t\t\t\targs: args_,\n\t\t\t\tchecksum,\n\t\t\t\tunsafe,\n\t\t\t\tnetwork,\n\t\t\t\thostPaths,\n\t\t\t}),\n\t\t);\n\t}\n\n\tconstructor(arg: ConstructorArg) {\n\t\tthis.#hash = arg.hash;\n\t\tthis.#system = arg.system;\n\t\tthis.#executable = arg.executable;\n\t\tthis.#env = arg.env;\n\t\tthis.#args = arg.args;\n\t\tthis.#checksum = arg.checksum;\n\t\tthis.#unsafe = arg.unsafe;\n\t\tthis.#network = arg.network;\n\t\tthis.#hostPaths = arg.hostPaths;\n\t}\n\n\ttoSyscall(): syscall.Command {\n\t\tlet hash = this.#hash;\n\t\tlet system = this.#system;\n\t\tlet executable = this.#executable.toSyscall();\n\t\tlet env = Object.fromEntries(\n\t\t\tObject.entries(this.#env).map(([key, value]) => [key, value.toSyscall()]),\n\t\t);\n\t\tlet args = this.#args.map((arg) => arg.toSyscall());\n\t\tlet checksum = this.#checksum;\n\t\tlet unsafe = this.#unsafe;\n\t\tlet network = this.#network;\n\t\tlet hostPaths = this.#hostPaths;\n\t\treturn {\n\t\t\thash,\n\t\t\tsystem,\n\t\t\texecutable,\n\t\t\tenv,\n\t\t\targs,\n\t\t\tchecksum,\n\t\t\tunsafe,\n\t\t\tnetwork,\n\t\t\thostPaths,\n\t\t};\n\t}\n\n\tstatic fromSyscall(command: syscall.Command): Command {\n\t\tlet hash = command.hash;\n\t\tlet system = command.system;\n\t\tlet executable = Template.fromSyscall(command.executable);\n\t\tlet env = Object.fromEntries(\n\t\t\tObject.entries(command.env).map(([key, value]) => [\n\t\t\t\tkey,\n\t\t\t\tTemplate.fromSyscall(value),\n\t\t\t]),\n\t\t);\n\t\tlet args = command.args.map((arg) => Template.fromSyscall(arg));\n\t\tlet checksum = command.checksum;\n\t\tlet unsafe = command.unsafe;\n\t\tlet network = command.network;\n\t\tlet hostPaths = command.hostPaths;\n\t\treturn new Command({\n\t\t\thash,\n\t\t\tsystem,\n\t\t\texecutable,\n\t\t\tenv,\n\t\t\targs,\n\t\t\tchecksum,\n\t\t\tunsafe,\n\t\t\tnetwork,\n\t\t\thostPaths,\n\t\t});\n\t}\n\n\thash(): Operation.Hash {\n\t\treturn this.#hash;\n\t}\n\n\tasync run(): Promise<Artifact | undefined> {\n\t\tlet outputFromSyscall = await syscall.operation.run(\n\t\t\tOperation.toSyscall(this),\n\t\t);\n\t\tlet output = Value.fromSyscall(outputFromSyscall);\n\t\treturn output as Artifact;\n\t}\n}\n\nexport namespace Command {\n\texport type Arg = {\n\t\tsystem: System;\n\t\texecutable: Template.Arg;\n\t\tenv?: Record<string, Template.Arg>;\n\t\targs?: Array<Template.Arg>;\n\t\tchecksum?: Checksum;\n\t\tunsafe?: boolean;\n\t\tnetwork?: boolean;\n\t\thostPaths?: Array<string>;\n\t};\n}\n", "import { Artifact } from \"./artifact.ts\";\nimport { Blob } from \"./blob.ts\";\nimport { Command } from \"./command.ts\";\nimport { Directory } from \"./directory.ts\";\nimport { File } from \"./file.ts\";\nimport { Operation } from \"./operation.ts\";\nimport { Relpath, Subpath } from \"./path.ts\";\nimport { Placeholder } from \"./placeholder.ts\";\nimport { Resource } from \"./resource.ts\";\nimport { Symlink } from \"./symlink.ts\";\nimport { Template } from \"./template.ts\";\nimport { Value } from \"./value.ts\";\n\nexport type Unresolved<T extends Value> = MaybePromise<\n\tT extends\n\t\t| undefined\n\t\t| boolean\n\t\t| number\n\t\t| string\n\t\t| Uint8Array\n\t\t| Relpath\n\t\t| Subpath\n\t\t| Blob\n\t\t| Artifact\n\t\t| Placeholder\n\t\t| Template\n\t\t| Operation\n\t\t? T\n\t\t: T extends Array<infer U extends Value>\n\t\t? Array<Unresolved<U>>\n\t\t: T extends { [key: string]: Value }\n\t\t? { [K in keyof T]: Unresolved<T[K]> }\n\t\t: never\n>;\n\nexport type Resolved<T extends Unresolved<Value>> = T extends\n\t| undefined\n\t| boolean\n\t| number\n\t| string\n\t| Uint8Array\n\t| Relpath\n\t| Subpath\n\t| Blob\n\t| Artifact\n\t| Placeholder\n\t| Template\n\t| Operation\n\t? T\n\t: T extends Promise<infer U extends Unresolved<Value>>\n\t? Resolved<U>\n\t: T extends Array<infer U extends Unresolved<Value>>\n\t? Array<Resolved<U>>\n\t: T extends { [key: string]: Unresolved<Value> }\n\t? { [K in keyof T]: Resolved<T[K]> }\n\t: never;\n\nexport type MaybePromise<T> = T | Promise<T>;\n\nexport let resolve = async <T extends Unresolved<Value>>(\n\tvalue: T,\n): Promise<Resolved<T>> => {\n\tvalue = await value;\n\tif (\n\t\tvalue === undefined ||\n\t\ttypeof value === \"boolean\" ||\n\t\ttypeof value === \"number\" ||\n\t\ttypeof value === \"string\" ||\n\t\tvalue instanceof Uint8Array ||\n\t\tvalue instanceof Relpath ||\n\t\tvalue instanceof Subpath ||\n\t\tvalue instanceof Blob ||\n\t\tvalue instanceof Directory ||\n\t\tvalue instanceof File ||\n\t\tvalue instanceof Symlink ||\n\t\tvalue instanceof Placeholder ||\n\t\tvalue instanceof Template ||\n\t\tvalue instanceof Command ||\n\t\tvalue instanceof Function ||\n\t\tvalue instanceof Resource\n\t) {\n\t\treturn value as unknown as Resolved<T>;\n\t} else if (value instanceof Array) {\n\t\treturn (await Promise.all(\n\t\t\tvalue.map((value) => resolve(value)),\n\t\t)) as Resolved<T>;\n\t} else if (typeof value === \"object\") {\n\t\treturn Object.fromEntries(\n\t\t\tawait Promise.all(\n\t\t\t\tObject.entries(value).map(async ([key, value]) => [\n\t\t\t\t\tkey,\n\t\t\t\t\tawait resolve(value),\n\t\t\t\t]),\n\t\t\t),\n\t\t) as Resolved<T>;\n\t} else {\n\t\tthrow new Error(\"Invalid value to resolve.\");\n\t}\n};\n", "import { assert as assert_ } from \"./assert.ts\";\nimport { Unresolved, resolve } from \"./resolve.ts\";\nimport * as syscall from \"./syscall.ts\";\n\nexport let blob = async (arg: Blob.Arg) => {\n\treturn await Blob.new(arg);\n};\n\ntype ConstructorArg = {\n\thash: Blob.Hash;\n};\n\nexport class Blob {\n\t#hash: Blob.Hash;\n\n\tstatic async new(arg: Unresolved<Blob.Arg>): Promise<Blob> {\n\t\tlet resolvedArg = await resolve(arg);\n\t\tlet bytes: Uint8Array | string;\n\t\tif (resolvedArg instanceof Uint8Array || typeof resolvedArg === \"string\") {\n\t\t\tbytes = resolvedArg;\n\t\t} else {\n\t\t\treturn resolvedArg;\n\t\t}\n\t\treturn Blob.fromSyscall(await syscall.blob.new(bytes));\n\t}\n\n\tconstructor(arg: ConstructorArg) {\n\t\tthis.#hash = arg.hash;\n\t}\n\n\tstatic is(value: unknown): value is Blob {\n\t\treturn value instanceof Blob;\n\t}\n\n\tstatic expect(value: unknown): Blob {\n\t\tassert_(Blob.is(value));\n\t\treturn value;\n\t}\n\n\tstatic assert(value: unknown): asserts value is Blob {\n\t\tassert_(Blob.is(value));\n\t}\n\n\ttoSyscall(): syscall.Blob {\n\t\treturn {\n\t\t\thash: this.#hash,\n\t\t};\n\t}\n\n\tstatic fromSyscall(value: syscall.Blob): Blob {\n\t\tlet hash = value.hash;\n\t\treturn new Blob({ hash });\n\t}\n\n\thash(): Blob.Hash {\n\t\treturn this.#hash;\n\t}\n\n\tasync bytes(): Promise<Uint8Array> {\n\t\treturn await syscall.blob.bytes(this.toSyscall());\n\t}\n\n\tasync text(): Promise<string> {\n\t\treturn await syscall.blob.text(this.toSyscall());\n\t}\n}\n\nexport namespace Blob {\n\texport type Arg = Uint8Array | string | Blob;\n\n\texport namespace Arg {\n\t\texport let is = (value: unknown): value is Blob.Arg => {\n\t\t\treturn (\n\t\t\t\tvalue instanceof Uint8Array ||\n\t\t\t\ttypeof value === \"string\" ||\n\t\t\t\tvalue instanceof Blob\n\t\t\t);\n\t\t};\n\n\t\texport let expect = (value: unknown): Arg => {\n\t\t\tassert_(is(value));\n\t\t\treturn value;\n\t\t};\n\n\t\texport let assert = (value: unknown): asserts value is Arg => {\n\t\t\tassert_(is(value));\n\t\t};\n\t}\n\n\texport type Hash = string;\n}\n", "import { Artifact } from \"./artifact.ts\";\nimport { assert as assert_ } from \"./assert.ts\";\nimport { Blob } from \"./blob.ts\";\nimport { File, file } from \"./file.ts\";\nimport { Subpath, subpath } from \"./path.ts\";\nimport { Unresolved, resolve } from \"./resolve.ts\";\nimport { Symlink } from \"./symlink.ts\";\nimport * as syscall from \"./syscall.ts\";\n\nexport let directory = async (...args: Array<Unresolved<Directory.Arg>>) => {\n\treturn await Directory.new(...args);\n};\n\ntype ConstructorArg = {\n\thash: Artifact.Hash;\n\tentries: Record<string, Artifact.Hash>;\n};\n\nexport class Directory {\n\t#hash: Artifact.Hash;\n\t#entries: Record<string, Artifact.Hash>;\n\n\tstatic async new(\n\t\t...args: Array<Unresolved<Directory.Arg>>\n\t): Promise<Directory> {\n\t\t// Create the entries.\n\t\tlet entries: Record<string, Artifact> = {};\n\n\t\t// Apply each arg.\n\t\tfor (let arg of await Promise.all(args.map(resolve))) {\n\t\t\tif (arg === undefined) {\n\t\t\t\t// If the arg is undefined, then continue.\n\t\t\t} else if (arg instanceof Directory) {\n\t\t\t\t// If the arg is a directory, then apply each entry.\n\t\t\t\tfor (let [name, entry] of Object.entries(await arg.entries())) {\n\t\t\t\t\t// Get an existing entry.\n\t\t\t\t\tlet existingEntry = entries[name];\n\n\t\t\t\t\t// Merge the existing entry with the entry if they are both directories.\n\t\t\t\t\tif (\n\t\t\t\t\t\texistingEntry instanceof Directory &&\n\t\t\t\t\t\tentry instanceof Directory\n\t\t\t\t\t) {\n\t\t\t\t\t\tentry = await Directory.new(existingEntry, entry);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Set the entry.\n\t\t\t\t\tentries[name] = entry;\n\t\t\t\t}\n\t\t\t} else if (typeof arg === \"object\") {\n\t\t\t\t// If the arg is an object, then apply each entry.\n\t\t\t\tfor (let [key, value] of Object.entries(arg)) {\n\t\t\t\t\t// Separate the first path component from the trailing path components.\n\t\t\t\t\tlet [firstComponent, ...trailingComponents] =\n\t\t\t\t\t\tsubpath(key).components();\n\t\t\t\t\tif (firstComponent === undefined) {\n\t\t\t\t\t\tthrow new Error(\"The path must have at least one component.\");\n\t\t\t\t\t}\n\t\t\t\t\tlet name = firstComponent;\n\n\t\t\t\t\t// Get an existing entry.\n\t\t\t\t\tlet existingEntry = entries[name];\n\n\t\t\t\t\t// Remove the entry if it is not a directory.\n\t\t\t\t\tif (!(existingEntry instanceof Directory)) {\n\t\t\t\t\t\texistingEntry = undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (trailingComponents.length > 0) {\n\t\t\t\t\t\t// If there are trailing path components, then recurse.\n\t\t\t\t\t\tlet trailingPath = subpath(trailingComponents).toString();\n\n\t\t\t\t\t\t// Merge the entry with the trailing path.\n\t\t\t\t\t\tlet newEntry = await Directory.new(existingEntry, {\n\t\t\t\t\t\t\t[trailingPath]: value,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// Add the entry.\n\t\t\t\t\t\tentries[name] = newEntry;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// If there are no trailing path components, then create the artifact specified by the value.\n\t\t\t\t\t\tif (value === undefined) {\n\t\t\t\t\t\t\tdelete entries[name];\n\t\t\t\t\t\t} else if (Blob.Arg.is(value)) {\n\t\t\t\t\t\t\tlet newEntry = await file(value);\n\t\t\t\t\t\t\tentries[name] = newEntry;\n\t\t\t\t\t\t} else if (File.is(value) || Symlink.is(value)) {\n\t\t\t\t\t\t\tentries[name] = value;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlet newEntry = await Directory.new(existingEntry, value);\n\t\t\t\t\t\t\tentries[name] = newEntry;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Create the directory.\n\t\treturn Directory.fromSyscall(\n\t\t\tsyscall.directory.new({\n\t\t\t\tentries: Object.fromEntries(\n\t\t\t\t\tObject.entries(entries).map(([name, entry]) => [\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tArtifact.toSyscall(entry),\n\t\t\t\t\t]),\n\t\t\t\t),\n\t\t\t}),\n\t\t);\n\t}\n\n\tconstructor(arg: ConstructorArg) {\n\t\tthis.#hash = arg.hash;\n\t\tthis.#entries = arg.entries;\n\t}\n\n\tstatic is(value: unknown): value is Directory {\n\t\treturn value instanceof Directory;\n\t}\n\n\tstatic expect(value: unknown): Directory {\n\t\tassert_(Directory.is(value));\n\t\treturn value;\n\t}\n\n\tstatic assert(value: unknown): asserts value is Directory {\n\t\tassert_(Directory.is(value));\n\t}\n\n\ttoSyscall(): syscall.Directory {\n\t\treturn {\n\t\t\thash: this.#hash,\n\t\t\tentries: this.#entries,\n\t\t};\n\t}\n\n\tstatic fromSyscall(directory: syscall.Directory): Directory {\n\t\tlet hash = directory.hash;\n\t\tlet entries = directory.entries;\n\t\treturn new Directory({ hash, entries });\n\t}\n\n\thash(): Artifact.Hash {\n\t\treturn this.#hash;\n\t}\n\n\tasync get(arg: Subpath.Arg): Promise<Artifact> {\n\t\tlet artifact = await this.tryGet(arg);\n\t\tassert_(artifact, `Failed to get the directory entry \"${arg}\".`);\n\t\treturn artifact;\n\t}\n\n\tasync tryGet(arg: Subpath.Arg): Promise<Artifact | undefined> {\n\t\tlet artifact: Artifact = this;\n\t\tfor (let component of subpath(arg).components()) {\n\t\t\tif (!(artifact instanceof Directory)) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tlet hash = artifact.#entries[component];\n\t\t\tif (!hash) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tartifact = await Artifact.get(hash);\n\t\t}\n\t\treturn artifact;\n\t}\n\n\tasync entries(): Promise<Record<string, Artifact>> {\n\t\tlet entries: Record<string, Artifact> = {};\n\t\tfor await (let [name, artifact] of this) {\n\t\t\tentries[name] = artifact;\n\t\t}\n\t\treturn entries;\n\t}\n\n\tasync bundle(): Promise<Directory> {\n\t\tlet bundledArtifact = Artifact.fromSyscall(\n\t\t\tawait syscall.artifact.bundle(Artifact.toSyscall(this)),\n\t\t);\n\t\tassert_(Directory.is(bundledArtifact));\n\t\treturn bundledArtifact;\n\t}\n\n\tasync *walk(): AsyncIterableIterator<[Subpath, Artifact]> {\n\t\tfor await (let [name, artifact] of this) {\n\t\t\tyield [subpath(name), artifact];\n\t\t\tif (Directory.is(artifact)) {\n\t\t\t\tfor await (let [entryName, entryArtifact] of artifact.walk()) {\n\t\t\t\t\tyield [subpath(name).join(entryName), entryArtifact];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t*[Symbol.iterator](): Iterator<[string, Artifact.Hash]> {\n\t\tfor (let [name, entry] of Object.entries(this.#entries)) {\n\t\t\tyield [name, entry];\n\t\t}\n\t}\n\n\tasync *[Symbol.asyncIterator](): AsyncIterator<[string, Artifact]> {\n\t\tfor (let name of Object.keys(this.#entries)) {\n\t\t\tyield [name, await this.get(name)];\n\t\t}\n\t}\n}\n\nexport namespace Directory {\n\texport type Arg = undefined | Directory | ArgObject;\n\n\texport type ArgObject = { [name: string]: ArgObjectValue };\n\n\texport type ArgObjectValue = undefined | Blob.Arg | Artifact | ArgObject;\n}\n", "import { assert as assert_, unreachable } from \"./assert.ts\";\nimport { Directory } from \"./directory.ts\";\nimport { File } from \"./file.ts\";\nimport { Symlink } from \"./symlink.ts\";\nimport * as syscall from \"./syscall.ts\";\n\nexport type Artifact = Directory | File | Symlink;\n\nexport namespace Artifact {\n\texport type Hash = string;\n\n\texport let is = (value: unknown): value is Artifact => {\n\t\treturn (\n\t\t\tvalue instanceof Directory ||\n\t\t\tvalue instanceof File ||\n\t\t\tvalue instanceof Symlink\n\t\t);\n\t};\n\n\texport let expect = (value: unknown): Artifact => {\n\t\tassert_(is(value));\n\t\treturn value;\n\t};\n\n\texport let assert = (value: unknown): asserts value is Artifact => {\n\t\tassert_(is(value));\n\t};\n\n\texport let get = async (hash: Hash): Promise<Artifact> => {\n\t\treturn Artifact.fromSyscall(await syscall.artifact.get(hash));\n\t};\n\n\texport let toSyscall = (artifact: Artifact): syscall.Artifact => {\n\t\tif (artifact instanceof Directory) {\n\t\t\treturn {\n\t\t\t\tkind: \"directory\",\n\t\t\t\tvalue: artifact.toSyscall(),\n\t\t\t};\n\t\t} else if (artifact instanceof File) {\n\t\t\treturn {\n\t\t\t\tkind: \"file\",\n\t\t\t\tvalue: artifact.toSyscall(),\n\t\t\t};\n\t\t} else if (artifact instanceof Symlink) {\n\t\t\treturn {\n\t\t\t\tkind: \"symlink\",\n\t\t\t\tvalue: artifact.toSyscall(),\n\t\t\t};\n\t\t} else {\n\t\t\treturn unreachable();\n\t\t}\n\t};\n\n\texport let fromSyscall = (artifact: syscall.Artifact): Artifact => {\n\t\tswitch (artifact.kind) {\n\t\t\tcase \"directory\": {\n\t\t\t\treturn Directory.fromSyscall(artifact.value);\n\t\t\t}\n\t\t\tcase \"file\": {\n\t\t\t\treturn File.fromSyscall(artifact.value);\n\t\t\t}\n\t\t\tcase \"symlink\": {\n\t\t\t\treturn Symlink.fromSyscall(artifact.value);\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\treturn unreachable();\n\t\t\t}\n\t\t}\n\t};\n}\n", "export let prepareStackTrace = (\n\t_error: unknown,\n\tstructuredStackTrace: Array<CallSite>,\n) => {\n\tlet callSites = structuredStackTrace.map((callSite) => {\n\t\treturn {\n\t\t\ttypeName: callSite.getTypeName(),\n\t\t\tfunctionName: callSite.getFunctionName(),\n\t\t\tmethodName: callSite.getMethodName(),\n\t\t\tfileName: callSite.getFileName(),\n\t\t\tlineNumber: callSite.getLineNumber(),\n\t\t\tcolumnNumber: callSite.getColumnNumber(),\n\t\t\tisEval: callSite.isEval(),\n\t\t\tisNative: callSite.isNative(),\n\t\t\tisConstructor: callSite.isConstructor(),\n\t\t\tisAsync: callSite.isAsync(),\n\t\t\tisPromiseAll: callSite.isPromiseAll(),\n\t\t\t// isPromiseAny: callSite.isPromiseAny(),\n\t\t\tpromiseIndex: callSite.getPromiseIndex(),\n\t\t};\n\t});\n\treturn { callSites };\n};\n\n/** This type is derived from <https://v8.dev/docs/stack-trace-api#customizing-stack-traces>. */\ntype CallSite = {\n\t/** Returns the type of this as a string. This is the name of the function stored in the constructor field of this, if available, otherwise the object\u2019s [[Class]] internal property. **/\n\tgetTypeName(): string;\n\n\t/** Returns the name of the current function, typically its name property. If a name property is not available an attempt is made to infer a name from the function\u2019s context. **/\n\tgetFunctionName(): string;\n\n\t/** Returns the name of the property of this or one of its prototypes that holds the current function. **/\n\tgetMethodName(): string;\n\n\t/** If this function was defined in a script returns the name of the script. **/\n\tgetFileName(): string | undefined;\n\n\t/** If this function was defined in a script returns the current line number. **/\n\tgetLineNumber(): number | undefined;\n\n\t/** If this function was defined in a script returns the current column number. **/\n\tgetColumnNumber(): number | undefined;\n\n\t/** If this function was created using a call to eval returns a string representing the location where eval was called. **/\n\tgetEvalOrigin(): unknown | undefined;\n\n\t/** does this call take place in code defined by a call to eval? **/\n\tisEval(): boolean;\n\n\t/** is this call in native V8 code? **/\n\tisNative(): boolean;\n\n\t/** is this a constructor call? **/\n\tisConstructor(): boolean;\n\n\t/** Is this an async call (i.e. await, Promise.all(), or Promise.any())? **/\n\tisAsync(): boolean;\n\n\t/** Is this an async call to Promise.all()? **/\n\tisPromiseAll(): boolean;\n\n\t// /** Is this an async call to Promise.any()? **/\n\t// isPromiseAny(): boolean;\n\n\t/** Returns the index of the promise element that was followed in Promise.all() or Promise.any() for async stack traces, or null if the CallSite is not an async Promise.all() or Promise.any() call. **/\n\tgetPromiseIndex(): number | null;\n};\n", "import { Artifact } from \"./artifact.ts\";\nimport { assert } from \"./assert.ts\";\nimport { Directory } from \"./directory.ts\";\nimport { Relpath, subpath } from \"./path.ts\";\nimport * as syscall from \"./syscall.ts\";\n\ntype Arg = {\n\tmodule: syscall.Module;\n\tpath: Relpath.Arg;\n};\n\nexport let include = async (arg: Arg): Promise<Artifact> => {\n\tassert(arg.module.kind === \"normal\");\n\tlet artifact = await Artifact.get(arg.module.value.packageHash);\n\tDirectory.assert(artifact);\n\tlet path = subpath(arg.module.value.modulePath)\n\t\t.toRelpath()\n\t\t.parent()\n\t\t.join(arg.path)\n\t\t.toSubpath();\n\tlet includedArtifact = artifact.get(path);\n\treturn includedArtifact;\n};\n", "import { Directory } from \"./directory.ts\";\nimport { File } from \"./file.ts\";\nimport { Placeholder } from \"./placeholder.ts\";\nimport { Symlink } from \"./symlink.ts\";\nimport * as syscall from \"./syscall.ts\";\nimport { Template } from \"./template.ts\";\n\n/** Write to the log. */\nexport let log = (...args: Array<unknown>) => {\n\tlet string = args.map((arg) => stringify(arg)).join(\" \");\n\tsyscall.log(string);\n};\n\nlet stringify = (value: unknown): string => {\n\treturn stringifyInner(value, new WeakSet());\n};\n\nlet stringifyInner = (value: unknown, visited: WeakSet<object>): string => {\n\tswitch (typeof value) {\n\t\tcase \"string\": {\n\t\t\treturn `\"${value}\"`;\n\t\t}\n\t\tcase \"number\": {\n\t\t\treturn value.toString();\n\t\t}\n\t\tcase \"boolean\": {\n\t\t\treturn value ? \"true\" : \"false\";\n\t\t}\n\t\tcase \"undefined\": {\n\t\t\treturn \"undefined\";\n\t\t}\n\t\tcase \"object\": {\n\t\t\tif (value === null) {\n\t\t\t\treturn \"null\";\n\t\t\t} else {\n\t\t\t\treturn stringifyObject(value, visited);\n\t\t\t}\n\t\t}\n\t\tcase \"function\": {\n\t\t\treturn `(function \"${value.name ?? \"(anonymous)\"}\")`;\n\t\t}\n\t\tcase \"symbol\": {\n\t\t\treturn \"(symbol)\";\n\t\t}\n\t\tcase \"bigint\": {\n\t\t\treturn value.toString();\n\t\t}\n\t}\n};\n\nlet stringifyObject = (value: object, visited: WeakSet<object>): string => {\n\t// If the value is in the visited set, then indicate that this is a circular reference.\n\tif (visited.has(value)) {\n\t\treturn \"(circular)\";\n\t}\n\n\t// Add the value to the visited set.\n\tvisited.add(value);\n\n\tif (value instanceof Array) {\n\t\t// Handle an array.\n\t\treturn `[${value\n\t\t\t.map((value) => stringifyInner(value, visited))\n\t\t\t.join(\", \")}]`;\n\t} else if (value instanceof Error) {\n\t\t// Handle an error.\n\t\treturn value.stack ?? \"\";\n\t} else if (value instanceof Promise) {\n\t\t// Handle a promise.\n\t\treturn \"(promise)\";\n\t} else if (value instanceof Directory) {\n\t\treturn `(tg.directory ${value.hash()})`;\n\t} else if (value instanceof File) {\n\t\treturn `(tg.file ${value.hash()})`;\n\t} else if (value instanceof Symlink) {\n\t\treturn `(tg.symlink ${value.hash()})`;\n\t} else if (value instanceof Placeholder) {\n\t\treturn `(tg.placeholder \"${value.name()}\")`;\n\t} else if (value instanceof Template) {\n\t\tlet string = value\n\t\t\t.components()\n\t\t\t.map((component) => {\n\t\t\t\tif (typeof component === \"string\") {\n\t\t\t\t\treturn component;\n\t\t\t\t} else {\n\t\t\t\t\treturn `\\${${stringifyInner(component, visited)}}`;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.join(\"\");\n\t\treturn `(tg.template \"${string}\")`;\n\t} else {\n\t\t// Handle any other object.\n\t\tlet constructorName = \"\";\n\t\tif (\n\t\t\tvalue.constructor !== undefined &&\n\t\t\tvalue.constructor.name !== \"Object\"\n\t\t) {\n\t\t\tconstructorName = `${value.constructor.name} `;\n\t\t}\n\t\tlet entries = Object.entries(value).map(\n\t\t\t([key, value]) => `${key}: ${stringifyInner(value, visited)}`,\n\t\t);\n\t\treturn `${constructorName}{ ${entries.join(\", \")} }`;\n\t}\n};\n", "export namespace System {\n\texport type Arg = System | ArgObject;\n\n\texport type ArgObject = {\n\t\tarch: Arch;\n\t\tos: Os;\n\t};\n}\n\nexport let system = (arg: System.Arg): System => {\n\tif (typeof arg === \"string\") {\n\t\treturn arg;\n\t} else {\n\t\tlet { arch, os } = arg;\n\t\treturn `${arch}_${os}` as System;\n\t}\n};\n\nexport type System =\n\t| \"amd64_linux\"\n\t| \"arm64_linux\"\n\t| \"amd64_macos\"\n\t| \"arm64_macos\";\n\nexport namespace System {\n\texport type Arch = \"amd64\" | \"arm64\";\n\n\texport type Os = \"linux\" | \"macos\";\n\n\texport let is = (value: unknown): value is System => {\n\t\treturn (\n\t\t\tvalue === \"amd64_linux\" ||\n\t\t\tvalue === \"arm64_linux\" ||\n\t\t\tvalue === \"amd64_macos\" ||\n\t\t\tvalue === \"arm64_macos\"\n\t\t);\n\t};\n\n\texport let arch = (system: System): Arch => {\n\t\tswitch (system) {\n\t\t\tcase \"amd64_linux\":\n\t\t\tcase \"amd64_macos\": {\n\t\t\t\treturn \"amd64\";\n\t\t\t}\n\t\t\tcase \"arm64_linux\":\n\t\t\tcase \"arm64_macos\": {\n\t\t\t\treturn \"arm64\";\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tthrow new Error(\"Invalid system.\");\n\t\t\t}\n\t\t}\n\t};\n\n\texport let os = (system: System): Os => {\n\t\tswitch (system) {\n\t\t\tcase \"amd64_linux\":\n\t\t\tcase \"arm64_linux\": {\n\t\t\t\treturn \"linux\";\n\t\t\t}\n\t\t\tcase \"amd64_macos\":\n\t\t\tcase \"arm64_macos\": {\n\t\t\t\treturn \"macos\";\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tthrow new Error(\"Invalid system.\");\n\t\t\t}\n\t\t}\n\t};\n}\n", "import { Artifact } from \"./artifact.ts\";\nimport { Blob, blob } from \"./blob.ts\";\nimport { command, output, run } from \"./command.ts\";\nimport { Directory, directory } from \"./directory.ts\";\nimport { env } from \"./env.ts\";\nimport { prepareStackTrace } from \"./error.ts\";\nimport { File, file } from \"./file.ts\";\nimport { Function, entrypoint, function_, functions } from \"./function.ts\";\nimport { include } from \"./include.ts\";\nimport { log } from \"./log.ts\";\nimport { Relpath, Subpath, relpath, subpath } from \"./path.ts\";\nimport { Placeholder, placeholder } from \"./placeholder.ts\";\nimport { resolve } from \"./resolve.ts\";\nimport { download, resource } from \"./resource.ts\";\nimport { Symlink, symlink } from \"./symlink.ts\";\nimport { base64, hex, json, toml, utf8, yaml } from \"./syscall.ts\";\nimport { System, system } from \"./system.ts\";\nimport { Template, t, template } from \"./template.ts\";\nimport { Value } from \"./value.ts\";\n\n// Set `Error.prepareStackTrace`.\nObject.defineProperties(Error, {\n\tprepareStackTrace: { value: prepareStackTrace },\n});\n\n// Create the console global.\nlet console = {\n\tlog,\n};\nObject.defineProperties(globalThis, {\n\tconsole: { value: console },\n});\n\n// Create the tg global.\nlet tg = {\n\tArtifact,\n\tBlob,\n\tDirectory,\n\tFile,\n\tFunction,\n\tPlaceholder,\n\tRelpath,\n\tSubpath,\n\tSymlink,\n\tSystem,\n\tTemplate,\n\tValue,\n\tbase64,\n\tblob,\n\tcommand,\n\tdirectory,\n\tdownload,\n\tentrypoint,\n\tenv,\n\tfile,\n\tfunction: function_,\n\thex,\n\tinclude,\n\tjson,\n\tlog,\n\toutput,\n\tplaceholder,\n\tfunctions,\n\trelpath,\n\tresolve,\n\tresource,\n\trun,\n\tsubpath,\n\tsymlink,\n\tsystem,\n\ttemplate,\n\ttoml,\n\tutf8,\n\tyaml,\n};\nObject.defineProperties(globalThis, {\n\ttg: { value: tg },\n\tt: { value: t },\n});\n"],
  "mappings": "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",
  "names": ["assert", "condition", "message", "unreachable", "message", "artifact", "cause", "hash", "base64", "value", "blob", "bytes", "command", "arg", "cause", "directory", "file", "function_", "hex", "value", "cause", "json", "log", "operation", "hash", "resource", "arg", "symlink", "toml", "utf8", "yaml", "base64", "value", "hex", "json", "toml", "utf8", "yaml", "env", "assert", "relpath", "args", "Relpath", "subpath", "Subpath", "#parents", "#subpath", "path", "visit", "arg", "component", "i", "entry", "value", "other", "string", "Arg", "assert", "#components", "components", "file", "arg", "File", "#hash", "#blob", "#executable", "#references", "resolvedArg", "resolve", "blob_", "executable", "references", "Blob", "blob", "reference", "Artifact", "value", "assert", "placeholder", "name", "Placeholder", "#name", "value", "resource", "arg", "Resource", "download", "#hash", "#url", "#unpack", "#checksum", "#unsafe", "value", "assert", "outputFromSyscall", "operation", "Operation", "Value", "t", "strings", "placeholders", "components", "i", "string", "placeholder", "template", "args", "Template", "#components", "collectComponents", "arg", "Relpath", "Subpath", "component", "resolve", "normalizedComponents", "lastComponent", "stripLeadingWhitespace", "value", "assert", "separator", "separatorTemplate", "argTemplates", "templates", "argTemplate", "Component", "Artifact", "Placeholder", "unreachable", "Arg", "minIndentLevel", "s", "lines", "line", "acc", "str", "l1", "l2", "minIndent", "indent", "symlink", "arg", "Symlink", "#hash", "#target", "resolvedArg", "resolve", "artifact", "path_", "Relpath", "Subpath", "Artifact", "Template", "assert", "firstComponent", "secondComponent", "resolvedArgPath", "target", "t", "value", "hash", "subpath", "result", "path", "Directory", "File", "Value", "value", "Relpath", "Subpath", "Blob", "Directory", "File", "Symlink", "Placeholder", "Template", "Command", "Resource", "assert", "Artifact", "Operation", "key", "unreachable", "functions", "function_", "arg", "assert", "Function", "key", "json", "entrypoint", "f", "syscallEnv", "syscallArgs", "env", "key", "value", "Value", "args", "output", "Function", "arg", "env_", "args_", "function_", "subpath", "target", "_", "resolve", "syscallOutput", "operation", "Operation", "assert", "hash", "packageHash", "modulePath", "kind", "name", "Operation", "value", "Command", "Function", "Resource", "operation", "unreachable", "command", "arg", "Command", "run", "output", "placeholder", "#hash", "#system", "#executable", "#env", "#args", "#checksum", "#unsafe", "#network", "#hostPaths", "resolvedArg", "resolve", "system", "executable", "template", "env", "key", "value", "env_", "args_", "checksum", "unsafe", "network", "hostPaths", "hash", "args", "Template", "outputFromSyscall", "operation", "Operation", "Value", "resolve", "value", "Relpath", "Subpath", "Blob", "Directory", "File", "Symlink", "Placeholder", "Template", "Command", "Resource", "key", "blob", "arg", "Blob", "#hash", "resolvedArg", "resolve", "bytes", "value", "assert", "hash", "Arg", "directory", "args", "Directory", "#hash", "#entries", "entries", "arg", "resolve", "name", "entry", "existingEntry", "key", "value", "firstComponent", "trailingComponents", "subpath", "trailingPath", "newEntry", "Blob", "file", "File", "Symlink", "Artifact", "assert", "hash", "artifact", "component", "bundledArtifact", "entryName", "entryArtifact", "Artifact", "value", "Directory", "File", "Symlink", "assert", "hash", "artifact", "unreachable", "prepareStackTrace", "_error", "structuredStackTrace", "callSite", "include", "arg", "assert", "artifact", "Artifact", "Directory", "path", "subpath", "log", "args", "string", "arg", "stringify", "value", "stringifyInner", "visited", "stringifyObject", "Directory", "File", "Symlink", "Placeholder", "Template", "component", "constructorName", "entries", "key", "system", "arg", "arch", "os", "System", "value", "prepareStackTrace", "console", "log", "tg", "Artifact", "Blob", "Directory", "File", "Function", "Placeholder", "Relpath", "Subpath", "Symlink", "System", "Template", "Value", "base64", "blob", "command", "directory", "download", "entrypoint", "env", "file", "function_", "hex", "include", "json", "output", "placeholder", "functions", "relpath", "resolve", "resource", "run", "subpath", "symlink", "system", "template", "toml", "utf8", "yaml", "t"]
}
